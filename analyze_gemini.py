#!/usr/bin/env python3
"""
An√°lise detalhada da f√≥rmula GEMINI para entender por que n√£o √© detectada.
"""
import re

def analyze_gemini_formula():
    """Analisa em detalhes por que a f√≥rmula GEMINI n√£o √© detectada."""
    
    formula = '=GEMINI_2_5_FLASH("me de um caso de uso que explica o conceito \'" & F2 & "\' de forma did√°tica, considerando o contexto \'" & D2 & "\'")'
    
    print("üîç AN√ÅLISE DETALHADA DA F√ìRMULA GEMINI")
    print("=" * 80)
    print(f"F√≥rmula: {formula}")
    print(f"Comprimento: {len(formula)}")
    print()
    
    # Verifica√ß√µes b√°sicas
    print("üìã VERIFICA√á√ïES B√ÅSICAS:")
    print(f"‚úì Come√ßa com '=': {formula.startswith('=')}")
    print(f"‚úì N√£o √© apenas '=': {formula != '='}")
    print(f"‚úì Tem mais de 1 caractere: {len(formula) > 1}")
    print()
    
    # Verificar indicadores de n√£o-f√≥rmula
    print("üö´ VERIFICANDO INDICADORES DE N√ÉO-F√ìRMULA:")
    non_formula_indicators = [
        ' n√£o ', ' nao ', ' is ', ' are ', ' was ', ' were ',
        ' the ', ' and ', ' or ', ' but ', ' if ', ' when ',
        ' para ', ' com ', ' sem ', ' por ', ' em ', ' de ',
    ]
    
    found_indicators = []
    for indicator in non_formula_indicators:
        if indicator in formula.lower():
            found_indicators.append(indicator)
    
    if found_indicators:
        print(f"‚ùå Encontrados indicadores de n√£o-f√≥rmula: {found_indicators}")
        print("   Isso faz com que a f√≥rmula seja considerada como texto comum!")
    else:
        print("‚úÖ Nenhum indicador de n√£o-f√≥rmula encontrado")
    
    print()
    
    # Verificar padr√µes de f√≥rmulas v√°lidas
    print("üîç VERIFICANDO PADR√ïES DE F√ìRMULAS V√ÅLIDAS:")
    valid_formula_patterns = [
        (r'^=\w+\(', '=FUNCAO('),
        (r'^=\d+[\+\-\*\/]', '=5+, =10*, etc.'),
        (r'^=[A-Z]+\d+', '=A1, =B2, etc.'),
        (r'^=.*\([^\)]*\).*$', 'Qualquer fun√ß√£o com par√™nteses'),
        (r'^=\d+(\.\d+)?([\+\-\*\/]\d+(\.\d+)?)+$', 'Opera√ß√µes matem√°ticas'),
    ]
    
    matches = []
    for pattern, description in valid_formula_patterns:
        if re.search(pattern, formula):
            matches.append((pattern, description))
    
    if matches:
        print("‚úÖ Padr√µes que coincidem:")
        for pattern, description in matches:
            print(f"   - {description}: {pattern}")
    else:
        print("‚ùå Nenhum padr√£o de f√≥rmula v√°lida encontrado")
    
    print()
    
    # Simula√ß√£o do algoritmo
    print("ü§ñ SIMULA√á√ÉO DO ALGORITMO:")
    print("1. F√≥rmula come√ßa com '='? SIM")
    print("2. Tem mais de 1 caractere? SIM")
    print("3. Conte√∫do ap√≥s '=' n√£o √© s√≥ espa√ßos? SIM")
    
    if found_indicators:
        print(f"4. Cont√©m indicadores de n√£o-f√≥rmula? SIM ‚Üí {found_indicators}")
        print("   RESULTADO: FALSE (n√£o √© f√≥rmula)")
        return False
    else:
        print("4. Cont√©m indicadores de n√£o-f√≥rmula? N√ÉO")
        if matches:
            print("5. Coincide com padr√µes v√°lidos? SIM")
            print("   RESULTADO: TRUE (√© f√≥rmula)")
            return True
        else:
            print("5. Coincide com padr√µes v√°lidos? N√ÉO")
            print("   RESULTADO: FALSE (n√£o √© f√≥rmula)")
            return False

def test_fix():
    """Testa poss√≠veis corre√ß√µes para detectar a f√≥rmula GEMINI."""
    
    formula = '=GEMINI_2_5_FLASH("me de um caso de uso que explica o conceito \'" & F2 & "\' de forma did√°tica, considerando o contexto \'" & D2 & "\'")'
    
    print("\nüîß TESTANDO POSS√çVEIS CORRE√á√ïES:")
    print("=" * 80)
    
    # Corre√ß√£o 1: Remover ' de ' da lista de indicadores
    print("üí° CORRE√á√ÉO 1: Remover ' de ' da lista de indicadores")
    non_formula_indicators_fixed = [
        ' n√£o ', ' nao ', ' is ', ' are ', ' was ', ' were ',
        ' the ', ' and ', ' or ', ' but ', ' if ', ' when ',
        ' para ', ' com ', ' sem ', ' por ', ' em ',
        # Removido: ' de '
    ]
    
    found_indicators_fixed = []
    for indicator in non_formula_indicators_fixed:
        if indicator in formula.lower():
            found_indicators_fixed.append(indicator)
    
    if found_indicators_fixed:
        print(f"   Ainda encontra indicadores: {found_indicators_fixed}")
        print("   Resultado: FALSE (n√£o √© f√≥rmula)")
    else:
        print("   Nenhum indicador encontrado!")
        
        # Verificar se agora coincide com padr√µes v√°lidos
        valid_formula_patterns = [
            r'^=\w+\(',  # =FUNCAO(
            r'^=\d+[\+\-\*\/]',  # =5+, =10*, etc.
            r'^=[A-Z]+\d+',  # =A1, =B2, etc.
            r'^=.*\([^\)]*\).*$',  # Qualquer fun√ß√£o com par√™nteses
            r'^=\d+(\.\d+)?([\+\-\*\/]\d+(\.\d+)?)+$',  # Opera√ß√µes matem√°ticas
        ]
        
        matches = []
        for pattern in valid_formula_patterns:
            if re.search(pattern, formula):
                matches.append(pattern)
        
        if matches:
            print(f"   Coincide com padr√µes: {matches}")
            print("   Resultado: TRUE (√© f√≥rmula) ‚úÖ")
        else:
            print("   N√£o coincide com padr√µes v√°lidos")
            print("   Resultado: FALSE (n√£o √© f√≥rmula)")
    
    print()
    
    # Corre√ß√£o 2: Adicionar padr√£o espec√≠fico para GEMINI
    print("üí° CORRE√á√ÉO 2: Adicionar padr√£o espec√≠fico para fun√ß√µes do Google Sheets")
    gemini_pattern = r'^=\w+_\w+_\w+\('  # =PALAVRA_PALAVRA_PALAVRA(
    
    if re.search(gemini_pattern, formula):
        print(f"   Padr√£o GEMINI coincide: {gemini_pattern}")
        print("   Resultado: TRUE (√© f√≥rmula) ‚úÖ")
    else:
        print(f"   Padr√£o GEMINI n√£o coincide: {gemini_pattern}")
        print("   Resultado: FALSE (n√£o √© f√≥rmula)")

if __name__ == "__main__":
    is_formula = analyze_gemini_formula()
    test_fix()
