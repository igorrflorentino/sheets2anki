#!/usr/bin/env python3
"""
Script para Cria√ß√£o de Pacote Standalone

Este script cria um pacote .ankiaddon para distribui√ß√£o FORA do AnkiWeb.
Para distribui√ß√£o fora do AnkiWeb, o manifest.json deve incluir informa√ß√µes completas.
"""

import os
import shutil
import json
import zipfile
from pathlib import Path

def create_standalone_package():
    """
    Cria pacote .ankiaddon para distribui√ß√£o fora do AnkiWeb.
    
    Para distribui√ß√£o fora do AnkiWeb, o manifest.json deve conter:
    - package: nome da pasta onde ser√° armazenado
    - name: nome mostrado ao usu√°rio  
    - conflicts (opcional): lista de pacotes conflitantes
    - mod (opcional): timestamp de atualiza√ß√£o
    """
    
    print("üì¶ CRIANDO PACOTE STANDALONE (.ankiaddon)")
    print("=" * 50)
    print("‚ÑπÔ∏è  Para distribui√ß√£o FORA do AnkiWeb")
    
    # Diret√≥rios
    script_dir = Path(__file__).parent
    source_dir = script_dir.parent  # Diret√≥rio raiz do projeto
    build_dir = source_dir / "build"
    package_dir = build_dir / "sheets2anki-standalone"
    
    # Limpar build anterior
    if package_dir.exists():
        shutil.rmtree(package_dir)
    
    # Criar diret√≥rios
    build_dir.mkdir(exist_ok=True)
    package_dir.mkdir()
    
    print("1. Copiando arquivos essenciais...")
    
    # Arquivos obrigat√≥rios
    essential_files = [
        "__init__.py",
        "manifest.json", 
        "config.json"
    ]
    
    for file in essential_files:
        source = source_dir / file
        dest = package_dir / file
        if source.exists():
            shutil.copy2(source, dest)
            print(f"   ‚úì {file}")
        else:
            print(f"   ‚ùå {file} n√£o encontrado")
    
    print("\n2. Copiando c√≥digo fonte...")
    
    # Diret√≥rio src
    src_source = source_dir / "src"
    src_dest = package_dir / "src"
    if src_source.exists():
        shutil.copytree(src_source, src_dest, ignore=ignore_patterns)
        print("   ‚úì src/")
    
    # Diret√≥rio libs
    libs_source = source_dir / "libs"
    libs_dest = package_dir / "libs"
    if libs_source.exists():
        shutil.copytree(libs_source, libs_dest, ignore=ignore_patterns)
        print("   ‚úì libs/")
    
    print("\n3. Validando manifest.json para distribui√ß√£o standalone...")
    
    # Ler e validar manifest
    manifest_path = package_dir / "manifest.json"
    try:
        with open(manifest_path, 'r', encoding='utf-8') as f:
            manifest = json.load(f)
    except Exception as e:
        print(f"   ‚ùå Erro ao ler manifest.json: {e}")
        return False
    
    # Verificar campos obrigat√≥rios para distribui√ß√£o externa
    required_fields = ['package', 'name']
    for field in required_fields:
        if field not in manifest or not manifest[field]:
            print(f"   ‚ùå Campo obrigat√≥rio ausente: {field}")
            return False
        print(f"   ‚úì {field}: {manifest[field]}")
    
    # Adicionar timestamp se n√£o existir
    if 'mod' not in manifest:
        import time
        manifest['mod'] = int(time.time())
        with open(manifest_path, 'w', encoding='utf-8') as f:
            json.dump(manifest, f, indent=4, ensure_ascii=False)
        print(f"   ‚úì Campo 'mod' adicionado: {manifest['mod']}")
    
    # Verificar outros campos √∫teis
    if 'conflicts' not in manifest:
        manifest['conflicts'] = []
        with open(manifest_path, 'w', encoding='utf-8') as f:
            json.dump(manifest, f, indent=4, ensure_ascii=False)
        print("   ‚úì Campo 'conflicts' adicionado (lista vazia)")
    
    print("\n4. Limpando arquivos desnecess√°rios...")
    
    # Remover arquivos de cache
    for root, dirs, files in os.walk(package_dir):
        # Remover __pycache__
        dirs_to_remove = [d for d in dirs if d == "__pycache__"]
        for d in dirs_to_remove:
            shutil.rmtree(os.path.join(root, d))
            print(f"   üóëÔ∏è  Removido: {os.path.relpath(os.path.join(root, d), package_dir)}")
            dirs.remove(d)
        
        # Remover arquivos .pyc, .pyo
        for file in files[:]:
            if file.endswith(('.pyc', '.pyo', '.DS_Store')) or file.startswith('.'):
                file_path = os.path.join(root, file)
                os.remove(file_path)
                print(f"   üóëÔ∏è  Removido: {os.path.relpath(file_path, package_dir)}")
    
    print("\n5. Criando arquivo .ankiaddon standalone...")
    
    # Criar arquivo .ankiaddon
    ankiaddon_path = build_dir / "sheets2anki-standalone.ankiaddon"
    
    with zipfile.ZipFile(ankiaddon_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(package_dir):
            for file in files:
                file_path = os.path.join(root, file)
                # Caminho relativo sem a pasta raiz
                arc_path = os.path.relpath(file_path, package_dir)
                zipf.write(file_path, arc_path)
                print(f"   üìù Adicionado: {arc_path}")
    
    # Estat√≠sticas
    file_count = sum(len(files) for _, _, files in os.walk(package_dir))
    ankiaddon_size = ankiaddon_path.stat().st_size / 1024  # KB
    
    print(f"\nüìä ESTAT√çSTICAS DO PACOTE STANDALONE:")
    print(f"   üìÅ Arquivos inclu√≠dos: {file_count}")
    print(f"   üì¶ Tamanho .ankiaddon: {ankiaddon_size:.1f} KB")
    print(f"   üìã Package ID: {manifest['package']}")
    print(f"   üè∑Ô∏è  Nome: {manifest['name']}")
    print(f"   üïí Timestamp: {manifest.get('mod', 'N/A')}")
    
    print(f"\n‚úÖ PACOTE STANDALONE CRIADO COM SUCESSO!")
    print(f"üìç Arquivo: {ankiaddon_path}")
    print(f"\nüì§ DISTRIBUI√á√ÉO FORA DO ANKIWEB:")
    print("   - Este arquivo pode ser distribu√≠do independentemente")
    print("   - Usu√°rios podem instalar via 'Install from file...'")
    print("   - O manifest.json cont√©m todas as informa√ß√µes necess√°rias")
    print("   - Compat√≠vel com instala√ß√£o manual no Anki")
    
    return True

def ignore_patterns(dir, files):
    """Padr√µes de arquivos a ignorar"""
    ignore = []
    for file in files:
        if file.startswith('.'):
            ignore.append(file)
        elif file.endswith(('.pyc', '.pyo')):
            ignore.append(file)
        elif file == '__pycache__':
            ignore.append(file)
    return ignore

if __name__ == "__main__":
    create_standalone_package()
