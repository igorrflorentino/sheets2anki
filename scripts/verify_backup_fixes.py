#!/usr/bin/env python3
"""
Script de diagn√≥stico atualizado para verificar as corre√ß√µes no sistema de backup
"""

import os
import sys

def check_import_fix():
    """Verifica se o import em backup_dialog.py foi corrigido"""
    try:
        with open("src/backup_dialog.py", "r") as f:
            content = f.read()
            
        has_bad_import = "from .backup_manager import BackupManager" in content
        has_good_import = "from .backup_system import BackupManager" in content
        
        if has_bad_import:
            return False, "‚ùå backup_dialog.py ainda importa backup_manager inexistente"
        elif has_good_import:
            return True, "‚úÖ backup_dialog.py importa corretamente de backup_system"
        else:
            return False, "‚ùå backup_dialog.py n√£o tem import do BackupManager"
            
    except FileNotFoundError:
        return False, "‚ùå Arquivo backup_dialog.py n√£o encontrado"

def check_sync_integration():
    """Verifica se o backup autom√°tico foi implementado em sync.py"""
    try:
        with open("src/sync.py", "r") as f:
            content = f.read()
            
        has_backup_check = "backup_before_sync" in content
        has_backup_manager_import = "from .backup_system import BackupManager" in content
        has_backup_creation = "backup_manager.create_backup" in content
        
        if has_backup_check and has_backup_manager_import and has_backup_creation:
            return True, "‚úÖ Backup autom√°tico implementado em sync.py"
        elif has_backup_check:
            return False, "‚ö†Ô∏è Verifica√ß√£o de config existe mas implementa√ß√£o incompleta"
        else:
            return False, "‚ùå Backup autom√°tico n√£o implementado em sync.py"
            
    except FileNotFoundError:
        return False, "‚ùå Arquivo sync.py n√£o encontrado"

def check_config_status():
    """Verifica status da configura√ß√£o backup_before_sync"""
    try:
        with open("config.json", "r") as f:
            import json
            config = json.load(f)
            
        backup_enabled = config.get("backup_before_sync", False)
        return backup_enabled, f"{'‚úÖ' if backup_enabled else '‚ÑπÔ∏è'} backup_before_sync: {backup_enabled}"
        
    except (FileNotFoundError, json.JSONDecodeError):
        return False, "‚ùå Erro ao ler config.json"

def main():
    print("üîç VERIFICA√á√ÉO DE CORRE√á√ïES: Sistema de Backup")
    print("=" * 50)
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists("src/backup_system.py"):
        print("‚ùå Execute este script na raiz do projeto sheets2anki")
        sys.exit(1)
    
    print("\nüìã VERIFICANDO CORRE√á√ïES IMPLEMENTADAS:")
    
    # 1. Verificar corre√ß√£o do import
    import_ok, import_msg = check_import_fix()
    print(f"\n1. Corre√ß√£o de Import:")
    print(f"   {import_msg}")
    
    # 2. Verificar implementa√ß√£o do backup autom√°tico
    sync_ok, sync_msg = check_sync_integration()
    print(f"\n2. Backup Autom√°tico:")
    print(f"   {sync_msg}")
    
    # 3. Verificar configura√ß√£o
    config_enabled, config_msg = check_config_status()
    print(f"\n3. Configura√ß√£o:")
    print(f"   {config_msg}")
    
    print("\n" + "=" * 50)
    print("üìä RESUMO DAS CORRE√á√ïES:")
    
    if import_ok and sync_ok:
        print("‚úÖ PROBLEMAS CR√çTICOS CORRIGIDOS!")
        print("   - Import do BackupManager corrigido")
        print("   - Backup autom√°tico implementado")
        print("")
        if config_enabled:
            print("‚úÖ Sistema pronto para usar!")
            print("   - Backup autom√°tico ativado")
        else:
            print("‚ÑπÔ∏è Para ativar o backup autom√°tico:")
            print("   - Configure backup_before_sync=true no config.json")
    else:
        print("‚ö†Ô∏è AINDA H√Å PROBLEMAS:")
        if not import_ok:
            print("   - Import do BackupManager precisa ser corrigido")
        if not sync_ok:
            print("   - Backup autom√°tico n√£o implementado")
    
    print("\nüß™ PR√ìXIMOS PASSOS PARA TESTE:")
    print("   1. Testar interface de backup manual")
    print("   2. Testar backup autom√°tico durante sync")
    print("   3. Testar restaura√ß√£o de backup")

if __name__ == "__main__":
    main()
