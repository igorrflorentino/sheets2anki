#!/usr/bin/env python3
"""
Diagn√≥stico completo do sistema de backup do Sheets2Anki.
"""

import sys
import os
import json
from pathlib import Path

def diagnose_backup_system():
    """Diagn√≥stica problemas no sistema de backup."""
    
    print("üîç DIAGN√ìSTICO: Sistema de Backup Sheets2Anki")
    print("=" * 55)
    
    project_root = Path("/Users/igorflorentino/‚Ä¢ Principais do Home/Git/Coding/anki/sheets2anki")
    
    # Verificar arquivos relacionados a backup
    backup_files = [
        "src/backup_system.py",
        "src/backup_dialog.py", 
        "src/backup_manager.py",
        "config.json",
        "meta.json"
    ]
    
    print("üìÅ VERIFICA√á√ÉO DE ARQUIVOS:")
    existing_files = []
    missing_files = []
    
    for file_path in backup_files:
        full_path = project_root / file_path
        if full_path.exists():
            existing_files.append(file_path)
            print(f"   ‚úÖ {file_path}")
        else:
            missing_files.append(file_path)
            print(f"   ‚ùå {file_path} (FALTANDO)")
    
    # Analisar problemas detectados
    print(f"\nüîç PROBLEMAS DETECTADOS:")
    
    problems = []
    
    # Problema 1: Import conflicts
    if "src/backup_manager.py" in missing_files:
        problems.append({
            'id': 'IMPORT_ERROR',
            'severity': 'üî¥ CR√çTICO',
            'issue': 'backup_dialog.py importa backup_manager que n√£o existe',
            'impact': 'Di√°logo de backup n√£o funciona',
            'solution': 'Corrigir import para usar BackupManager de backup_system.py'
        })
    
    # Problema 2: Backup autom√°tico n√£o implementado
    problems.append({
        'id': 'AUTO_BACKUP_MISSING',
        'severity': 'üü° M√âDIO',
        'issue': 'backup_before_sync=true no config mas n√£o implementado',
        'impact': 'Backup autom√°tico antes da sync n√£o funciona',
        'solution': 'Implementar chamada de backup autom√°tico em sync.py'
    })
    
    # Problema 3: Duplica√ß√£o de c√≥digo
    problems.append({
        'id': 'CODE_DUPLICATION',
        'severity': 'üü° M√âDIO', 
        'issue': 'BackupManager duplicado em backup_system.py',
        'impact': 'C√≥digo duplicado e confuso',
        'solution': 'Consolidar em uma classe √∫nica'
    })
    
    # Problema 4: Interface desconectada
    problems.append({
        'id': 'DIALOG_DISCONNECT',
        'severity': 'üî¥ CR√çTICO',
        'issue': 'backup_dialog.py n√£o consegue instanciar BackupManager',
        'impact': 'Interface de backup n√£o funciona',
        'solution': 'Corrigir refer√™ncias e imports'
    })
    
    # Problema 5: Falta de integra√ß√£o com sync
    problems.append({
        'id': 'SYNC_INTEGRATION',
        'severity': 'üü° M√âDIO',
        'issue': 'Backup autom√°tico n√£o √© chamado durante sincroniza√ß√£o',
        'impact': 'Configura√ß√£o backup_before_sync ignorada',
        'solution': 'Adicionar l√≥gica de backup em sync.py'
    })
    
    for i, problem in enumerate(problems, 1):
        print(f"\n{i}. {problem['severity']} {problem['id']}")
        print(f"   üìã Problema: {problem['issue']}")
        print(f"   üí• Impacto: {problem['impact']}")
        print(f"   üîß Solu√ß√£o: {problem['solution']}")
    
    print(f"\n" + "=" * 55)
    print("üìä AN√ÅLISE DETALHADA:")
    
    # Verificar configura√ß√£o atual
    try:
        with open(project_root / "meta.json", 'r', encoding='utf-8') as f:
            meta = json.load(f)
        
        config = meta.get("config", {})
        backup_before_sync = config.get("backup_before_sync", False)
        
        print(f"   ‚öôÔ∏è  backup_before_sync: {backup_before_sync}")
        if backup_before_sync:
            print(f"   ‚ö†Ô∏è  Configura√ß√£o ativa mas funcionalidade n√£o implementada!")
    except Exception as e:
        print(f"   ‚ùå Erro ao ler meta.json: {e}")
    
    # Analisar estrutura do backup_system.py
    try:
        backup_system_path = project_root / "src/backup_system.py"
        with open(backup_system_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar se h√° duplica√ß√£o de classes
        if content.count("class BackupManager") > 1:
            print(f"   üî¥ DUPLICA√á√ÉO: M√∫ltiplas classes BackupManager encontradas")
        
        # Verificar se show_backup_dialog existe
        if "def show_backup_dialog" in content:
            print(f"   ‚úÖ show_backup_dialog definida em backup_system.py")
        
    except Exception as e:
        print(f"   ‚ùå Erro ao analisar backup_system.py: {e}")
    
    print(f"\n" + "=" * 55)
    print("üéØ SOLU√á√ïES RECOMENDADAS:")
    
    solutions = [
        "1. üîß Corrigir import em backup_dialog.py:",
        "   - Trocar 'from .backup_manager import BackupManager'", 
        "   - Por 'from .backup_system import BackupManager'",
        "",
        "2. üîÑ Implementar backup autom√°tico em sync.py:",
        "   - Verificar config backup_before_sync",
        "   - Chamar BackupManager.create_backup() antes da sync",
        "   - Definir local padr√£o para backups autom√°ticos",
        "",
        "3. üßπ Limpar duplica√ß√£o de c√≥digo:",
        "   - Remover classe BackupManager duplicada",
        "   - Manter apenas uma implementa√ß√£o",
        "",
        "4. üß™ Testar funcionalidade completa:",
        "   - Backup manual via interface",
        "   - Backup autom√°tico durante sync",
        "   - Restaura√ß√£o de backups",
        "",
        "5. üìÅ Definir estrutura de backup:",
        "   - Diret√≥rio padr√£o para backups",
        "   - Naming convention para arquivos",
        "   - Limpeza autom√°tica de backups antigos"
    ]
    
    for solution in solutions:
        print(f"   {solution}")
    
    print(f"\n" + "=" * 55)
    print("üéØ PRIORIDADE DE CORRE√á√ÉO:")
    print("   üî¥ CR√çTICO: Corrigir imports (backup n√£o funciona)")
    print("   üü° M√âDIO: Implementar backup autom√°tico")
    print("   üü¢ BAIXO: Limpeza e otimiza√ß√£o do c√≥digo")
    
    return len([p for p in problems if 'CR√çTICO' in p['severity']])

def main():
    """Fun√ß√£o principal."""
    try:
        critical_issues = diagnose_backup_system()
        if critical_issues > 0:
            print(f"\nüö® {critical_issues} PROBLEMAS CR√çTICOS ENCONTRADOS!")
            print("‚ö†Ô∏è  Sistema de backup n√£o est√° funcionando corretamente")
            return 1
        else:
            print(f"\n‚úÖ NENHUM PROBLEMA CR√çTICO DETECTADO")
            return 0
    except Exception as e:
        print(f"\nüí• ERRO DURANTE DIAGN√ìSTICO: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
