#!/usr/bin/env python3
"""
Script de teste direto para verificar normaliza√ß√£o de nomes.
"""

import re

def normalize_student_name(name: str) -> str:
    """Fun√ß√£o de normaliza√ß√£o copiada diretamente."""
    if not name or not isinstance(name, str):
        return ""
    
    # Remove espa√ßos extras e caracteres de controle
    cleaned = re.sub(r'\s+', ' ', name.strip())
    
    # Remove caracteres especiais (mant√©m apenas letras, n√∫meros e espa√ßos)
    cleaned = re.sub(r'[^\w\s]', '', cleaned)
    
    if not cleaned:
        return ""
    
    # Aplica Title Case (primeira letra de cada palavra mai√∫scula)
    normalized = cleaned.title()
    
    return normalized

def test_normalization():
    """Testa todas as fun√ß√µes de normaliza√ß√£o."""
    
    print("üß™ TESTANDO NORMALIZA√á√ÉO DE NOMES DE ESTUDANTES")
    print("=" * 60)
    
    # Teste 1: Normaliza√ß√£o b√°sica
    print("\n1Ô∏è‚É£ TESTE: Normaliza√ß√£o b√°sica")
    test_cases = [
        "pedro", "PEDRO", "Pedro", "  pedro  ", "pEdRo",
        "maria silva", "MARIA SILVA", "Maria Silva", "  maria silva  ",
        "jo√£o", "JO√ÉO", "Jo√£o", "jo√£o pedro", "JO√ÉO PEDRO",
        "igor", "iGRO", "IGOR"
    ]
    
    for name in test_cases:
        normalized = normalize_student_name(name)
        print(f"  '{name}' ‚Üí '{normalized}'")
    
    # Teste 2: Caso espec√≠fico do usu√°rio
    print("\n2Ô∏è‚É£ TESTE: Caso espec√≠fico Pedro vs pedro")
    config_students = ["Belle", "Pedro"]
    note_type_students = ["pedro", "belle"]
    
    print(f"  Config: {config_students}")
    print(f"  Note types (raw): {note_type_students}")
    
    config_normalized = [normalize_student_name(s) for s in config_students]
    note_types_normalized = [normalize_student_name(s) for s in note_type_students]
    
    print(f"  Config (norm): {config_normalized}")
    print(f"  Note types (norm): {note_types_normalized}")
    
    # Verificar se s√£o iguais ap√≥s normaliza√ß√£o
    config_set = set(config_normalized)
    note_type_set = set(note_types_normalized)
    intersection = config_set.intersection(note_type_set)
    
    print(f"  Interse√ß√£o: {sorted(intersection)}")
    print(f"  Alunos habilitados: {sorted(config_set)}")
    print(f"  Alunos nos note types: {sorted(note_type_set)}")
    
    # O problema original: Pedro (config) n√£o era reconhecido como pedro (note types)
    pedro_config = normalize_student_name("Pedro")  # Do config
    pedro_note_type = normalize_student_name("pedro")  # Do note type
    
    print(f"\n  üéØ VERIFICA√á√ÉO PRINCIPAL:")
    print(f"  'Pedro' (config) ‚Üí '{pedro_config}'")  
    print(f"  'pedro' (note type) ‚Üí '{pedro_note_type}'")
    print(f"  S√£o iguais ap√≥s normaliza√ß√£o? {pedro_config == pedro_note_type}")
    
    print("\n‚úÖ TESTE CONCLU√çDO!")
    print("üéØ RESULTADO: Agora Pedro/pedro/PEDRO s√£o sempre normalizados para 'Pedro'")

if __name__ == "__main__":
    test_normalization()
