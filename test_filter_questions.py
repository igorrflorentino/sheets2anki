#!/usr/bin/env python3
"""
Teste espec√≠fico para verificar filtro de quest√µes com normaliza√ß√£o.
"""

import re

def normalize_student_name(name: str) -> str:
    """Fun√ß√£o de normaliza√ß√£o copiada."""
    if not name or not isinstance(name, str):
        return ""
    
    cleaned = re.sub(r'\s+', ' ', name.strip())
    cleaned = re.sub(r'[^\w\s]', '', cleaned)
    
    if not cleaned:
        return ""
    
    return cleaned.title()

def test_question_filtering():
    """Simula o filtro de quest√µes."""
    
    print("üß™ TESTE: FILTRO DE QUEST√ïES COM NORMALIZA√á√ÉO")
    print("=" * 60)
    
    # Simular quest√µes do deck remoto
    mock_questions = [
        {"fields": {"ALUNOS": "pedro"}},        # Min√∫sculo
        {"fields": {"ALUNOS": "PEDRO"}},        # Mai√∫sculo  
        {"fields": {"ALUNOS": "Pedro"}},        # Title Case
        {"fields": {"ALUNOS": "belle"}},        # Min√∫sculo
        {"fields": {"ALUNOS": "Belle"}},        # Title Case
        {"fields": {"ALUNOS": "igor"}},         # N√£o habilitado
        {"fields": {"ALUNOS": "pedro, belle"}}, # M√∫ltiplos alunos
        {"fields": {"ALUNOS": ""}},             # Sem aluno
    ]
    
    # Simular alunos selecionados (j√° normalizados pelo sistema)
    selected_students = {"Pedro", "Belle"}
    
    print(f"üìã DADOS DE TESTE:")
    print(f"  ‚Ä¢ Quest√µes no deck remoto: {len(mock_questions)}")
    print(f"  ‚Ä¢ Alunos selecionados: {sorted(selected_students)}")
    
    print(f"\nüîç PROCESSAMENTO:")
    
    filtered_questions = []
    
    for i, question in enumerate(mock_questions):
        fields = question.get('fields', {})
        alunos_field = fields.get('ALUNOS', '').strip()
        
        if not alunos_field:
            print(f"  üìù Quest√£o {i+1}: [SEM ALUNO] ‚Üí IGNORADA")
            continue
        
        # Normalizar estudantes da quest√£o
        question_students = set()
        alunos_list = re.split(r'[,;|]', alunos_field)
        for aluno in alunos_list:
            aluno = aluno.strip()
            if aluno:
                normalized_student = normalize_student_name(aluno)
                if normalized_student:
                    question_students.add(normalized_student)
        
        # Verificar interse√ß√£o
        intersection = question_students.intersection(selected_students)
        
        if intersection:
            filtered_questions.append(question)
            print(f"  üìù Quest√£o {i+1}: '{alunos_field}' ‚Üí {sorted(question_students)} ‚Üí ‚úÖ INCLU√çDA (match: {sorted(intersection)})")
        else:
            print(f"  üìù Quest√£o {i+1}: '{alunos_field}' ‚Üí {sorted(question_students)} ‚Üí ‚ùå IGNORADA")
    
    print(f"\nüéØ RESULTADO:")
    print(f"  ‚Ä¢ Quest√µes filtradas: {len(filtered_questions)}/{len(mock_questions)}")
    print(f"  ‚Ä¢ Espera-se: 6 quest√µes (todas com pedro/Pedro/PEDRO e belle/Belle + 1 mista)")
    print(f"  ‚Ä¢ Sucesso: {'‚úÖ' if len(filtered_questions) == 6 else '‚ùå'}")

if __name__ == "__main__":
    test_question_filtering()
