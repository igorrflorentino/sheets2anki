#!/usr/bin/env python3
"""
Teste da corre√ß√£o do problema de resolu√ß√£o de conflitos durante sincroniza√ß√£o.
"""

import sys
import os

# Adicionar src ao path
current_dir = os.path.dirname(os.path.abspath(__file__))
src_dir = os.path.join(current_dir, 'src')
sys.path.insert(0, src_dir)

def test_sync_conflict_preservation():
    """
    Testa a corre√ß√£o do problema onde a sincroniza√ß√£o revertia a resolu√ß√£o de conflitos.
    """
    print("=== TESTE DA CORRE√á√ÉO DE SINCRONIZA√á√ÉO ===\n")
    
    # Mock das fun√ß√µes e dados
    def mock_get_remote_decks():
        """Simula decks existentes com conflito resolvido."""
        return {
            "3c30faa1": {
                "remote_deck_url": "https://docs.google.com/url2", 
                "remote_deck_name": "#0 Sheets2Anki Template 7#conflito1",  # J√Å COM RESOLU√á√ÉO
                "local_deck_name": "Sheets2Anki::#0 Sheets2Anki Template 7_2"
            }
        }
    
    def resolve_remote_deck_name_conflict(url, remote_deck_name):
        """Mock da resolu√ß√£o."""
        # Simular que h√° outros decks com mesmo nome base
        existing_names = ["#0 Sheets2Anki Template 7"]
        
        if remote_deck_name not in existing_names:
            return remote_deck_name
        
        return f"{remote_deck_name}#conflito1"
    
    # Simular cen√°rios de sincroniza√ß√£o
    print("üîç CEN√ÅRIOS DE TESTE:")
    
    # Cen√°rio 1: Nome j√° com resolu√ß√£o de conflito (DEVE PRESERVAR)
    print("\n1Ô∏è‚É£ CEN√ÅRIO: Deck com conflito j√° resolvido")
    
    stored_name = "#0 Sheets2Anki Template 7#conflito1"  # J√Å RESOLVIDO
    new_name_from_url = "#0 Sheets2Anki Template 7"      # NOME EXTRA√çDO DA URL
    
    print(f"   üìÅ Nome armazenado: '{stored_name}'")
    print(f"   üåê Nome da URL: '{new_name_from_url}'")
    
    # L√≥gica ANTIGA (problem√°tica)
    print(f"\n   ‚ùå L√ìGICA ANTIGA (problem√°tica):")
    print(f"      ‚Üí Sobrescreveria: '{stored_name}' ‚Üí '{new_name_from_url}'")
    print(f"      ‚Üí ‚ö†Ô∏è PERDERIA a resolu√ß√£o de conflito!")
    
    # L√≥gica NOVA (corrigida)
    print(f"\n   ‚úÖ L√ìGICA NOVA (corrigida):")
    if stored_name and '#conflito' in stored_name:
        preserved_name = stored_name
        print(f"      ‚Üí Preserva resolu√ß√£o: '{preserved_name}'")
        print(f"      ‚Üí ‚úÖ Conflito mantido corretamente!")
        final_name = preserved_name
    else:
        resolved_name = resolve_remote_deck_name_conflict("url", new_name_from_url)
        print(f"      ‚Üí Aplica resolu√ß√£o: '{new_name_from_url}' ‚Üí '{resolved_name}'")
        final_name = resolved_name
    
    # Cen√°rio 2: Nome sem conflito (DEVE APLICAR RESOLU√á√ÉO SE NECESS√ÅRIO)
    print(f"\n2Ô∏è‚É£ CEN√ÅRIO: Deck sem resolu√ß√£o pr√©via")
    
    stored_name2 = "#0 Novo Template"
    new_name_from_url2 = "#0 Novo Template"
    
    print(f"   üìÅ Nome armazenado: '{stored_name2}'")
    print(f"   üåê Nome da URL: '{new_name_from_url2}'")
    
    print(f"\n   ‚úÖ L√ìGICA NOVA:")
    if stored_name2 and '#conflito' in stored_name2:
        final_name2 = stored_name2
        print(f"      ‚Üí Preserva resolu√ß√£o: '{final_name2}'")
    else:
        if stored_name2 != new_name_from_url2:
            resolved_name2 = resolve_remote_deck_name_conflict("url2", new_name_from_url2)
            print(f"      ‚Üí Aplica resolu√ß√£o: '{new_name_from_url2}' ‚Üí '{resolved_name2}'")
            final_name2 = resolved_name2
        else:
            final_name2 = stored_name2
            print(f"      ‚Üí Mant√©m inalterado: '{final_name2}'")
    
    print(f"\nüìä RESULTADO FINAL:")
    print(f"   ‚Ä¢ Cen√°rio 1: '{final_name}' ‚úÖ (conflito preservado)")
    print(f"   ‚Ä¢ Cen√°rio 2: '{final_name2}' ‚úÖ (l√≥gica aplicada corretamente)")
    
    print(f"\nüéØ CORRE√á√ÉO IMPLEMENTADA:")
    print(f"   ‚úÖ Verifica se nome j√° tem resolu√ß√£o ('#conflito' no nome)")
    print(f"   ‚úÖ Preserva nomes com conflito j√° resolvido")
    print(f"   ‚úÖ Aplica resolu√ß√£o apenas quando necess√°rio")
    print(f"   ‚úÖ Evita revers√£o de conflitos durante sincroniza√ß√£o")
    
    print(f"\nüî• PROBLEMA ORIGINAL RESOLVIDO:")
    print(f"   ‚ùå ANTES: Sincroniza√ß√£o revertia '#0...#conflito1' ‚Üí '#0...'")
    print(f"   ‚úÖ DEPOIS: Sincroniza√ß√£o preserva '#0...#conflito1'")
    print(f"   ‚úÖ Note types mant√™m nomes √∫nicos durante toda opera√ß√£o")

if __name__ == "__main__":
    test_sync_conflict_preservation()
