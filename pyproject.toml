[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sheets2anki"
version = "1.0.0"
description = "Add-on profissional para sincronizar decks do Anki com planilhas do Google Sheets"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Igor Florentino", email = "igorlopesc@gmail.com" },
]
maintainers = [
    { name = "Igor Florentino", email = "igorlopesc@gmail.com" },
]
keywords = [
    "anki",
    "google-sheets",
    "flashcards",
    "education",
    "spaced-repetition",
    "addon",
    "study-tools",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Education",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "aqt>=25.7.2",
    "beautifulsoup4>=4.12.0",
    "chardet>=5.2.0",
    "soupsieve>=2.6",
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "mypy>=1.8.0",
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.3.0",
    "pre-commit>=3.5.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/igorrflorentino/sheets2anki"
Documentation = "https://github.com/igorrflorentino/sheets2anki/blob/main/README.md"
Repository = "https://github.com/igorrflorentino/sheets2anki.git"
"Bug Tracker" = "https://github.com/igorrflorentino/sheets2anki/issues"
Changelog = "https://github.com/igorrflorentino/sheets2anki/blob/main/CHANGELOG.md"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/scripts",
    "/libs",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
    "pyproject.toml",
]

# =============================================================================
# PYTEST CONFIGURATION
# =============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "requires_anki: marks tests that require Anki environment",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# =============================================================================
# BLACK CODE FORMATTER
# =============================================================================
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # directories
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | build
    | dist
    | libs
)/
'''

# =============================================================================
# RUFF LINTER
# =============================================================================
[tool.ruff]
target-version = "py39"
line-length = 88
extend-exclude = [
    "libs/",
    "build/",
    ".venv/",
    "__pycache__/",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "N806",  # variable name should be lowercase
    "N803",  # argument name should be lowercase
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["B011", "F401", "F811"]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["sheets2anki"]
force-single-line = true

# =============================================================================
# MYPY TYPE CHECKER
# =============================================================================
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Ignore missing imports for third-party libraries
[[tool.mypy.overrides]]
module = [
    "aqt.*",
    "anki.*",
    "bs4.*",
    "chardet.*",
]
ignore_missing_imports = true

# =============================================================================
# COVERAGE CONFIGURATION
# =============================================================================
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "libs/*",
    "build/*",
    ".venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
