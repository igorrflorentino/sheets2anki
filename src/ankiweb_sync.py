"""
M√≥dulo de sincroniza√ß√£o autom√°tica com AnkiWeb para o addon Sheets2Anki.

Este m√≥dulo implementa funcionalidades para sincroniza√ß√£o autom√°tica com o AnkiWeb
ap√≥s a sincroniza√ß√£o de decks remotos, incluindo op√ß√µes para:
- Sincroniza√ß√£o normal (download/upload conforme necess√°rio)
- For√ßar upload (enviar dados locais para o AnkiWeb)
- Desabilitar sincroniza√ß√£o autom√°tica

Funcionalidades:
- Integra√ß√£o com a API de sync do Anki
- Controle de timeout e notifica√ß√µes
- Logging detalhado de opera√ß√µes
- Tratamento de erros e conflitos
"""

import time
from typing import Optional, Dict, Any
from .compat import mw, showInfo, showWarning
from .config_manager import (
    get_ankiweb_sync_mode,
    get_ankiweb_sync_timeout,
    get_ankiweb_sync_notifications
)

# =============================================================================
# UTILIT√ÅRIOS DE DEBUG
# =============================================================================

try:
    from .utils import add_debug_message
except ImportError:
    def add_debug_message(message, category="ANKIWEB_SYNC"):
        print(f"[{category}] {message}")

# =============================================================================
# FUN√á√ïES PRINCIPAIS DE SINCRONIZA√á√ÉO
# =============================================================================

def can_sync_ankiweb():
    """
    Verifica se √© poss√≠vel sincronizar com AnkiWeb.
    
    Returns:
        bool: True se pode sincronizar, False caso contr√°rio
    """
    if not mw or not mw.col:
        add_debug_message("‚ùå Anki n√£o dispon√≠vel", "ANKIWEB_SYNC")
        return False
    
    # Verificar se existe configura√ß√£o de sync
    if not hasattr(mw, 'pm') or not mw.pm:
        add_debug_message("‚ùå Profile manager n√£o dispon√≠vel", "ANKIWEB_SYNC")
        return False
    
    # Verificar se h√° credenciais configuradas (compat√≠vel com diferentes vers√µes)
    try:
        # Tentar m√©todos diferentes baseados na vers√£o do Anki
        ankiweb_configured = False
        
        # M√©todo 1: Verificar se existe auth token ou similar
        if hasattr(mw.pm, 'sync_key') and mw.pm.sync_key():
            ankiweb_configured = True
            add_debug_message("‚úÖ AnkiWeb configurado (sync_key encontrada)", "ANKIWEB_SYNC")
        
        # M√©todo 2: Verificar configura√ß√£o de sync no profile
        elif hasattr(mw.pm, 'profile') and mw.pm.profile and mw.pm.profile.get('syncKey'):
            ankiweb_configured = True
            add_debug_message("‚úÖ AnkiWeb configurado (profile syncKey encontrada)", "ANKIWEB_SYNC")
        
        # M√©todo 3: Verificar se sync est√° habilitado de alguma forma
        elif hasattr(mw.pm, 'meta') and mw.pm.meta and mw.pm.meta.get('syncKey'):
            ankiweb_configured = True
            add_debug_message("‚úÖ AnkiWeb configurado (meta syncKey encontrada)", "ANKIWEB_SYNC")
        
        # M√©todo 4: Verificar atrav√©s das prefer√™ncias
        elif hasattr(mw, 'pm') and hasattr(mw.pm, 'profile'):
            profile = mw.pm.profile
            if profile and isinstance(profile, dict) and profile.get('syncUser'):
                ankiweb_configured = True
                add_debug_message("‚úÖ AnkiWeb configurado (syncUser encontrado)", "ANKIWEB_SYNC")
        
        if not ankiweb_configured:
            add_debug_message("‚ö†Ô∏è AnkiWeb n√£o est√° configurado - acesse Ferramentas > Sincronizar no Anki", "ANKIWEB_SYNC")
            return False
        
        return True
        
    except Exception as e:
        add_debug_message(f"‚ùå Erro ao verificar configura√ß√£o AnkiWeb: {e}", "ANKIWEB_SYNC")
        return False

def sync_ankiweb_normal():
    """
    Executa sincroniza√ß√£o normal com AnkiWeb (bidirecionaal).
    
    Returns:
        dict: Resultado da sincroniza√ß√£o com status e detalhes
    """
    if not can_sync_ankiweb():
        return {
            'success': False,
            'error': 'N√£o √© poss√≠vel sincronizar: AnkiWeb n√£o configurado ou Anki n√£o dispon√≠vel'
        }
    
    add_debug_message("üîÑ Iniciando sincroniza√ß√£o normal com AnkiWeb (bidirecional)...", "ANKIWEB_SYNC")
    
    try:
        # Usar a fun√ß√£o de sync integrada do Anki
        if hasattr(mw, 'sync') and hasattr(mw.sync, 'sync'):
            add_debug_message("üîÑ Usando API de sync integrada...", "ANKIWEB_SYNC")
            
            # Executar sincroniza√ß√£o atrav√©s do MainWindow
            mw.sync.sync()
            
            add_debug_message("‚úÖ Sincroniza√ß√£o AnkiWeb iniciada com sucesso", "ANKIWEB_SYNC")
            return {
                'success': True,
                'message': 'Sincroniza√ß√£o AnkiWeb iniciada com sucesso! Acompanhe o progresso na barra de status do Anki.',
                'type': 'normal'
            }
        else:
            # Fallback para vers√µes mais antigas
            add_debug_message("üîÑ Usando API de compatibilidade (vers√µes anteriores do Anki)...", "ANKIWEB_SYNC")
            
            # Tentar usar o m√©todo direto
            if hasattr(mw, 'onSync'):
                mw.onSync()
                return {
                    'success': True,
                    'message': 'Sincroniza√ß√£o AnkiWeb iniciada com sucesso! O Anki decidir√° automaticamente se far√° upload ou download dos seus dados.',
                    'type': 'normal'
                }
            else:
                return {
                    'success': False,
                    'error': 'API de sincroniza√ß√£o n√£o dispon√≠vel nesta vers√£o do Anki'
                }
    
    except Exception as e:
        add_debug_message(f"‚ùå Erro durante sincroniza√ß√£o: {e}", "ANKIWEB_SYNC")
        return {
            'success': False,
            'error': f'Erro na sincroniza√ß√£o: {str(e)}'
        }

def sync_ankiweb_force_upload():
    """
    For√ßa upload dos dados locais para AnkiWeb.
    
    Returns:
        dict: Resultado da opera√ß√£o com status e detalhes
    """
    if not can_sync_ankiweb():
        return {
            'success': False,
            'error': 'N√£o √© poss√≠vel sincronizar: AnkiWeb n√£o configurado ou Anki n√£o dispon√≠vel'
        }
    
    add_debug_message("‚¨ÜÔ∏è Iniciando sincroniza√ß√£o com prioridade para upload local...", "ANKIWEB_SYNC")
    
    try:
        # Para force upload, usar a mesma API mas com aviso
        add_debug_message("‚ÑπÔ∏è Nota: O Anki usa sincroniza√ß√£o inteligente - far√° upload apenas se os dados locais forem mais recentes", "ANKIWEB_SYNC")
        
        # Executar sincroniza√ß√£o normal - o Anki decidir√° se precisa fazer upload
        if hasattr(mw, 'sync') and hasattr(mw.sync, 'sync'):
            add_debug_message("‚¨ÜÔ∏è Usando API moderna de sincroniza√ß√£o do Anki...", "ANKIWEB_SYNC")
            
            mw.sync.sync()
            
            add_debug_message("‚úÖ Sincroniza√ß√£o para upload iniciada com sucesso", "ANKIWEB_SYNC")
            return {
                'success': True,
                'message': 'Sincroniza√ß√£o AnkiWeb iniciada! Se seus dados locais forem mais recentes, ser√£o enviados automaticamente para o AnkiWeb.',
                'type': 'force_upload'
            }
        elif hasattr(mw, 'onSync'):
            mw.onSync()
            return {
                'success': True,
                'message': 'Sincroniza√ß√£o AnkiWeb iniciada com sucesso! O Anki decidir√° automaticamente se far√° upload ou download dos seus dados.',
                'type': 'force_upload'
            }
        else:
            return {
                'success': False,
                'error': 'API de sincroniza√ß√£o n√£o dispon√≠vel nesta vers√£o do Anki'
            }
    
    except Exception as e:
        add_debug_message(f"‚ùå Erro durante upload for√ßado: {e}", "ANKIWEB_SYNC")
        return {
            'success': False,
            'error': f'Erro no upload for√ßado: {str(e)}'
        }

def execute_ankiweb_sync_if_configured():
    """
    Executa sincroniza√ß√£o AnkiWeb baseada na configura√ß√£o do usu√°rio.
    Esta fun√ß√£o √© chamada automaticamente ap√≥s sincroniza√ß√£o de decks remotos.
    
    Returns:
        dict: Resultado da opera√ß√£o com status e detalhes, ou None se desabilitado
    """
    sync_mode = get_ankiweb_sync_mode()
    
    if sync_mode == "none":
        add_debug_message("‚èπÔ∏è Sincroniza√ß√£o AnkiWeb desabilitada", "ANKIWEB_SYNC")
        return None
    
    add_debug_message(f"üéØ Modo de sync configurado: {sync_mode}", "ANKIWEB_SYNC")
    
    # Verificar se pode sincronizar
    if not can_sync_ankiweb():
        error_msg = "AnkiWeb n√£o configurado - acesse Ferramentas > Sincronizar no Anki"
        add_debug_message(f"‚ö†Ô∏è {error_msg}", "ANKIWEB_SYNC")
        
        if get_ankiweb_sync_notifications():
            showWarning(f"Sheets2Anki: {error_msg}")
        
        return {
            'success': False,
            'error': error_msg
        }
    
    # Executar sincroniza√ß√£o baseada no modo
    result = None
    
    if sync_mode == "sync":
        result = sync_ankiweb_normal()
    elif sync_mode == "force_upload":
        result = sync_ankiweb_force_upload()
    
    # Mostrar notifica√ß√£o se configurado
    if result and get_ankiweb_sync_notifications():
        if result['success']:
            showInfo(f"Sheets2Anki: {result['message']}")
        else:
            showWarning(f"Sheets2Anki: Erro na sincroniza√ß√£o AnkiWeb - {result['error']}")
    
    return result

# =============================================================================
# FUN√á√ïES AUXILIARES
# =============================================================================

def get_sync_status():
    """
    Obt√©m informa√ß√µes sobre o status atual de sincroniza√ß√£o.
    
    Returns:
        dict: Status de configura√ß√£o e capacidade de sincroniza√ß√£o
    """
    return {
        'ankiweb_configured': can_sync_ankiweb(),
        'sync_mode': get_ankiweb_sync_mode(),
        'timeout': get_ankiweb_sync_timeout(),
        'notifications_enabled': get_ankiweb_sync_notifications(),
        'can_sync': can_sync_ankiweb()
    }

def test_ankiweb_connection():
    """
    Testa a conex√£o com AnkiWeb sem fazer sincroniza√ß√£o completa.
    
    Returns:
        dict: Resultado do teste de conex√£o
    """
    if not can_sync_ankiweb():
        return {
            'success': False,
            'error': 'AnkiWeb n√£o configurado'
        }
    
    add_debug_message("üîç Testando conex√£o com AnkiWeb...", "ANKIWEB_SYNC")
    
    try:
        from anki.httpclient import HttpClient
        
        client = HttpClient()
        client.timeout = 10  # Timeout curto para teste
        
        # Tentar uma opera√ß√£o simples
        response = client.get("https://ankiweb.net/account/login")
        
        if response.status_code == 200:
            add_debug_message("‚úÖ Conex√£o com AnkiWeb OK", "ANKIWEB_SYNC")
            return {
                'success': True,
                'message': 'Conex√£o com AnkiWeb estabelecida'
            }
        else:
            add_debug_message(f"‚ùå Erro de conex√£o: {response.status_code}", "ANKIWEB_SYNC")
            return {
                'success': False,
                'error': f'Erro de conex√£o: {response.status_code}'
            }
    
    except Exception as e:
        add_debug_message(f"‚ùå Erro ao testar conex√£o: {e}", "ANKIWEB_SYNC")
        return {
            'success': False,
            'error': f'Erro ao testar conex√£o: {str(e)}'
        }
