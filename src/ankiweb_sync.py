"""
M√≥dulo de sincroniza√ß√£o autom√°tica com AnkiWeb para o addon Sheets2Anki.

Este m√≥dulo implementa funcionalidades para sincroniza√ß√£o autom√°tica com o AnkiWeb
ap√≥s a sincroniza√ß√£o de decks remotos, incluindo op√ß√µes para:
- Sincroniza√ß√£o normal (download/upload conforme necess√°rio)
- Desabilitar sincroniza√ß√£o autom√°tica

Funcionalidades:
- Integra√ß√£o com a API de sync do Anki
- Controle de timeout e notifica√ß√µes
- Logging detalhado de opera√ß√µes
- Tratamento de erros e conflitos
"""

from .compat import mw
from .compat import showWarning
from .config_manager import get_ankiweb_sync_mode
from .config_manager import get_ankiweb_sync_notifications
from .config_manager import get_ankiweb_sync_timeout

# =============================================================================
# UTILIT√ÅRIOS DE DEBUG
# =============================================================================

try:
    from .utils import add_debug_message
except ImportError:

    def add_debug_message(message, category="ANKIWEB_SYNC"):
        print(f"[{category}] {message}")


# =============================================================================
# FUN√á√ïES PRINCIPAIS DE SINCRONIZA√á√ÉO
# =============================================================================


def can_sync_ankiweb():
    """
    Verifica se √© poss√≠vel sincronizar com AnkiWeb.

    Returns:
        bool: True se pode sincronizar, False caso contr√°rio
    """
    if not mw or not mw.col:
        add_debug_message("‚ùå Anki n√£o dispon√≠vel", "ANKIWEB_SYNC")
        return False

    # Verificar se existe profile manager
    if not hasattr(mw, "pm") or not mw.pm:
        add_debug_message("‚ùå Profile manager n√£o dispon√≠vel", "ANKIWEB_SYNC")
        return False

    # Verificar se h√° credenciais configuradas
    try:
        # M√©todo 1: Verificar se existe sync_key (m√©todo padr√£o)
        if hasattr(mw.pm, "sync_key") and mw.pm.sync_key():
            add_debug_message("‚úÖ AnkiWeb configurado (sync_key)", "ANKIWEB_SYNC")
            return True

        # M√©todo 2: Verificar atrav√©s do profile
        if hasattr(mw.pm, "profile") and mw.pm.profile:
            profile = mw.pm.profile
            if isinstance(profile, dict):
                if profile.get("syncKey") or profile.get("syncUser"):
                    add_debug_message(
                        "‚úÖ AnkiWeb configurado (profile)", "ANKIWEB_SYNC"
                    )
                    return True

        # M√©todo 3: Verificar se o menu de sync est√° dispon√≠vel (indica configura√ß√£o)
        if hasattr(mw, "sync") and mw.sync:
            add_debug_message("‚úÖ AnkiWeb: sistema de sync dispon√≠vel", "ANKIWEB_SYNC")
            return True

        add_debug_message(
            "‚ö†Ô∏è AnkiWeb n√£o est√° configurado - acesse Ferramentas > Sincronizar no Anki",
            "ANKIWEB_SYNC",
        )
        return False

    except Exception as e:
        add_debug_message(
            f"‚ùå Erro ao verificar configura√ß√£o AnkiWeb: {e}", "ANKIWEB_SYNC"
        )
        return False


def sync_ankiweb_normal():
    """
    Executa sincroniza√ß√£o normal com AnkiWeb (bidirecionaal).

    Returns:
        dict: Resultado da sincroniza√ß√£o com status e detalhes
    """
    if not can_sync_ankiweb():
        return {
            "success": False,
            "error": "N√£o √© poss√≠vel sincronizar: AnkiWeb n√£o configurado ou Anki n√£o dispon√≠vel",
        }

    add_debug_message(
        "üîÑ Iniciando sincroniza√ß√£o normal com AnkiWeb (bidirecional)...",
        "ANKIWEB_SYNC",
    )

    try:
        # M√©todo 1: Usar a API moderna de sincroniza√ß√£o
        if hasattr(mw, "sync") and hasattr(mw.sync, "sync"):
            add_debug_message(
                "üîÑ Usando API moderna de sincroniza√ß√£o...", "ANKIWEB_SYNC"
            )
            mw.sync.sync()
            add_debug_message(
                "‚úÖ Sincroniza√ß√£o AnkiWeb iniciada (API moderna)", "ANKIWEB_SYNC"
            )
            return {
                "success": True,
                "message": "Sincroniza√ß√£o AnkiWeb iniciada com sucesso! Acompanhe o progresso na barra de status do Anki.",
                "type": "normal",
            }

        # M√©todo 2: Usar onSync (m√©todo direto)
        elif hasattr(mw, "onSync"):
            add_debug_message("üîÑ Usando m√©todo onSync direto...", "ANKIWEB_SYNC")
            mw.onSync()
            add_debug_message(
                "‚úÖ Sincroniza√ß√£o AnkiWeb iniciada (onSync)", "ANKIWEB_SYNC"
            )
            return {
                "success": True,
                "message": "Sincroniza√ß√£o AnkiWeb iniciada com sucesso! O Anki decidir√° automaticamente se far√° upload ou download dos seus dados.",
                "type": "normal",
            }

        # M√©todo 3: Tentar atrav√©s de a√ß√µes do menu
        elif hasattr(mw, "form") and hasattr(mw.form, "actionSync"):
            add_debug_message(
                "üîÑ Usando a√ß√£o de menu de sincroniza√ß√£o...", "ANKIWEB_SYNC"
            )
            mw.form.actionSync.trigger()
            add_debug_message(
                "‚úÖ Sincroniza√ß√£o AnkiWeb iniciada (menu action)", "ANKIWEB_SYNC"
            )
            return {
                "success": True,
                "message": "Sincroniza√ß√£o AnkiWeb iniciada atrav√©s do menu!",
                "type": "normal",
            }

        else:
            # Adicionar informa√ß√µes de debug para entender o que est√° dispon√≠vel
            debug_info = []
            debug_info.append(f"mw existe: {mw is not None}")
            if mw:
                debug_info.append(f"mw.sync existe: {hasattr(mw, 'sync')}")
                if hasattr(mw, "sync"):
                    debug_info.append(
                        f"mw.sync.sync existe: {hasattr(mw.sync, 'sync')}"
                    )
                debug_info.append(f"mw.onSync existe: {hasattr(mw, 'onSync')}")
                debug_info.append(f"mw.form existe: {hasattr(mw, 'form')}")
                if hasattr(mw, "form"):
                    debug_info.append(
                        f"mw.form.actionSync existe: {hasattr(mw.form, 'actionSync')}"
                    )

            debug_message = " | ".join(debug_info)
            add_debug_message(f"üîç Debug API sync: {debug_message}", "ANKIWEB_SYNC")

            return {
                "success": False,
                "error": f"API de sincroniza√ß√£o n√£o encontrada. Debug: {debug_message}",
            }

    except Exception as e:
        add_debug_message(f"‚ùå Erro durante sincroniza√ß√£o: {e}", "ANKIWEB_SYNC")
        return {"success": False, "error": f"Erro na sincroniza√ß√£o: {str(e)}"}


def execute_ankiweb_sync_if_configured():
    """
    Executa sincroniza√ß√£o AnkiWeb baseada na configura√ß√£o do usu√°rio.
    Esta fun√ß√£o √© chamada automaticamente ap√≥s sincroniza√ß√£o de decks remotos.

    Returns:
        dict: Resultado da opera√ß√£o com status e detalhes, ou None se desabilitado
    """
    sync_mode = get_ankiweb_sync_mode()

    if sync_mode == "none":
        add_debug_message("‚èπÔ∏è Sincroniza√ß√£o AnkiWeb desabilitada", "ANKIWEB_SYNC")
        return None

    add_debug_message(f"üéØ Modo de sync configurado: {sync_mode}", "ANKIWEB_SYNC")

    # Verificar se pode sincronizar
    if not can_sync_ankiweb():
        error_msg = "AnkiWeb n√£o configurado - acesse Ferramentas > Sincronizar no Anki"
        add_debug_message(f"‚ö†Ô∏è {error_msg}", "ANKIWEB_SYNC")

        if get_ankiweb_sync_notifications():
            showWarning(f"Sheets2Anki: {error_msg}")

        return {"success": False, "error": error_msg}

    # Executar sincroniza√ß√£o baseada no modo
    result = None

    if sync_mode == "sync":
        result = sync_ankiweb_normal()

    return result


# =============================================================================
# FUN√á√ïES AUXILIARES
# =============================================================================


def get_sync_status():
    """
    Obt√©m informa√ß√µes sobre o status atual de sincroniza√ß√£o.

    Returns:
        dict: Status de configura√ß√£o e capacidade de sincroniza√ß√£o
    """
    status = {
        "ankiweb_configured": can_sync_ankiweb(),
        "sync_mode": get_ankiweb_sync_mode(),
        "timeout": get_ankiweb_sync_timeout(),
        "notifications_enabled": get_ankiweb_sync_notifications(),
        "can_sync": can_sync_ankiweb(),
        "debug_info": {},
    }

    # Adicionar informa√ß√µes de debug
    if mw and mw.pm:
        try:
            debug_info = {}
            debug_info["has_sync_key"] = hasattr(mw.pm, "sync_key") and bool(
                mw.pm.sync_key()
            )
            debug_info["has_profile"] = hasattr(mw.pm, "profile") and bool(
                mw.pm.profile
            )
            debug_info["has_sync_system"] = hasattr(mw, "sync") and bool(mw.sync)

            if (
                hasattr(mw.pm, "profile")
                and mw.pm.profile
                and isinstance(mw.pm.profile, dict)
            ):
                profile = mw.pm.profile
                debug_info["has_profile_synckey"] = bool(profile.get("syncKey"))
                debug_info["has_profile_syncuser"] = bool(profile.get("syncUser"))

            status["debug_info"] = debug_info
        except Exception as e:
            status["debug_info"]["error"] = str(e)

    return status


def test_ankiweb_connection():
    """
    Testa conectividade b√°sica com AnkiWeb.
    Esta fun√ß√£o testa apenas a conectividade de rede, n√£o a configura√ß√£o de credenciais.

    Returns:
        dict: Resultado do teste de conex√£o
    """
    add_debug_message("üîç Testando conectividade com AnkiWeb...", "ANKIWEB_SYNC")

    try:
        from anki.httpclient import HttpClient

        client = HttpClient()
        client.timeout = 10  # Timeout curto para teste

        # Tentar uma opera√ß√£o simples
        response = client.get("https://ankiweb.net/account/login")

        if response.status_code == 200:
            add_debug_message("‚úÖ Conectividade com AnkiWeb OK", "ANKIWEB_SYNC")

            # Verificar tamb√©m se AnkiWeb est√° configurado para dar feedback completo
            is_configured = can_sync_ankiweb()

            # Verificar quais APIs de sync est√£o dispon√≠veis
            sync_methods = []
            if hasattr(mw, "sync") and hasattr(mw.sync, "sync"):
                sync_methods.append("API moderna")
            if hasattr(mw, "onSync"):
                sync_methods.append("onSync")
            if hasattr(mw, "form") and hasattr(mw.form, "actionSync"):
                sync_methods.append("Menu action")

            methods_info = (
                f" (M√©todos dispon√≠veis: {', '.join(sync_methods)})"
                if sync_methods
                else " (Nenhum m√©todo de sync encontrado)"
            )

            if is_configured:
                return {
                    "success": True,
                    "message": f"Conectividade OK e AnkiWeb configurado! ‚úÖ{methods_info}",
                }
            else:
                return {
                    "success": True,
                    "message": f"Conectividade OK, mas AnkiWeb n√£o est√° configurado. Acesse Ferramentas > Sincronizar no Anki para configurar. ‚ö†Ô∏è{methods_info}",
                }
        else:
            add_debug_message(
                f"‚ùå Erro de conectividade: {response.status_code}", "ANKIWEB_SYNC"
            )
            return {
                "success": False,
                "error": f"Erro de conectividade: HTTP {response.status_code}",
            }

    except Exception as e:
        add_debug_message(f"‚ùå Erro ao testar conectividade: {e}", "ANKIWEB_SYNC")
        return {"success": False, "error": f"Erro de conectividade: {str(e)}"}
