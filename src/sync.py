"""
Fun√ß√µes de sincroniza√ß√£o principal para o addon Sheets2Anki.

Este m√≥dulo cont√©m as fun√ß√µes centrais para sincroniza√ß√£o
de decks com fontes remotas, usando o novo sistema de configura√ß√£o.
Inclui tamb√©m classes para gerenciamento de estat√≠sticas e finaliza√ß√£o.
"""

import time
import traceback
from dataclasses import dataclass
from dataclasses import field
from typing import Any
from typing import Dict
from typing import List
from typing import Optional

from .compat import AlignLeft
from .compat import AlignTop
from .compat import MessageBox_No
from .compat import MessageBox_Yes
from .compat import QDialog
from .compat import QGroupBox
from .compat import QLabel
from .compat import QMessageBox
from .compat import QProgressDialog
from .compat import QPushButton
from .compat import QTextEdit
from .compat import QVBoxLayout
from .compat import mw
from .compat import safe_exec_dialog
from .compat import showInfo
from .config_manager import get_deck_local_name
from .config_manager import get_remote_decks
from .config_manager import save_remote_decks
from .config_manager import sync_note_type_names_robustly
from .config_manager import update_note_type_names_in_meta
from .data_processor import create_or_update_notes
from .data_processor import getRemoteDeck
from .student_manager import get_selected_students_for_deck
from .templates_and_definitions import update_existing_note_type_templates
from .utils import SyncError
from .utils import add_debug_message
from .utils import capture_deck_note_type_ids
from .utils import clear_debug_messages
from .utils import get_publication_key_hash
from .utils import remove_empty_subdecks
from .utils import validate_url
from .name_consistency_manager import NameConsistencyManager

# ========================================================================================
# CLASSES DE ESTAT√çSTICAS DE SINCRONIZA√á√ÉO (consolidado de sync_stats.py)
# ========================================================================================


@dataclass
class SyncStats:
    """Estat√≠sticas de uma sincroniza√ß√£o."""

    created: int = 0
    updated: int = 0
    deleted: int = 0
    ignored: int = 0
    errors: int = 0
    unchanged: int = 0
    skipped: int = 0

    # M√©tricas detalhadas do deck remoto - REFATORADAS
    # 1. Total de linhas da tabela (independente de preenchimento)
    remote_total_table_lines: int = 0

    # 2. Total de linhas com notas v√°lidas (ID preenchido)
    remote_valid_note_lines: int = 0

    # 3. Total de linhas inv√°lidas (ID vazio)
    remote_invalid_note_lines: int = 0

    # 4. Total de linhas marcadas para sincronizar (SYNC? = true)
    remote_sync_marked_lines: int = 0

    # 5. Total potencial de notas que ser√£o criadas no Anki (ID √ó alunos + [MISSING A.])
    remote_total_potential_anki_notes: int = 0

    # 6. Total potencial de notas para alunos espec√≠ficos
    remote_potential_student_notes: int = 0

    # 7. Total potencial de notas para [MISSING A.]
    remote_potential_missing_a_notes: int = 0

    # 8. Total de alunos √∫nicos encontrados
    remote_unique_students_count: int = 0

    # 9. Total potencial de notas por aluno (detalhado)
    remote_notes_per_student: Dict[str, int] = field(default_factory=dict)

    error_details: List[str] = field(default_factory=list)
    # Campos para detalhes estruturados
    update_details: List[Dict[str, Any]] = field(default_factory=list)
    creation_details: List[Dict[str, Any]] = field(default_factory=list)
    deletion_details: List[Dict[str, Any]] = field(default_factory=list)

    def add_error(self, error_msg: str) -> None:
        """Adiciona um erro √†s estat√≠sticas."""
        self.errors += 1
        self.error_details.append(error_msg)

    def add_update_detail_structured(self, detail: Dict[str, Any]) -> None:
        """Adiciona um detalhe estruturado de atualiza√ß√£o."""
        self.update_details.append(detail)

    def add_creation_detail(self, detail: Dict[str, Any]) -> None:
        """Adiciona um detalhe de cria√ß√£o."""
        self.creation_details.append(detail)

    def add_deletion_detail(self, detail: Dict[str, Any]) -> None:
        """Adiciona um detalhe de exclus√£o."""
        self.deletion_details.append(detail)

    def merge(self, other: "SyncStats") -> None:
        """Merge com outras estat√≠sticas."""
        self.created += other.created
        self.updated += other.updated
        self.deleted += other.deleted
        self.ignored += other.ignored
        self.errors += other.errors
        self.unchanged += other.unchanged
        self.skipped += other.skipped

        # Agregar m√©tricas do deck remoto - REFATORADAS
        self.remote_total_table_lines += other.remote_total_table_lines
        self.remote_valid_note_lines += other.remote_valid_note_lines
        self.remote_invalid_note_lines += other.remote_invalid_note_lines
        self.remote_sync_marked_lines += other.remote_sync_marked_lines
        self.remote_total_potential_anki_notes += (
            other.remote_total_potential_anki_notes
        )
        self.remote_potential_student_notes += other.remote_potential_student_notes
        self.remote_potential_missing_a_notes += other.remote_potential_missing_a_notes
        self.remote_unique_students_count = max(
            self.remote_unique_students_count, other.remote_unique_students_count
        )

        # Merge dos dicion√°rios de notas por aluno - SOMAR os valores
        for student, count in other.remote_notes_per_student.items():
            if student in self.remote_notes_per_student:
                # CORRIGI: Somar em vez de pegar o m√°ximo para ter total agregado correto
                self.remote_notes_per_student[student] += count
            else:
                self.remote_notes_per_student[student] = count

        self.error_details.extend(other.error_details)
        self.update_details.extend(other.update_details)
        self.creation_details.extend(other.creation_details)
        self.deletion_details.extend(other.deletion_details)

    def get_total_operations(self) -> int:
        """Retorna o total de opera√ß√µes realizadas."""
        return self.created + self.updated + self.deleted + self.ignored

    def has_changes(self) -> bool:
        """Verifica se houve mudan√ßas."""
        return self.created > 0 or self.updated > 0 or self.deleted > 0

    def has_errors(self) -> bool:
        """Verifica se houve erros."""
        return self.errors > 0


@dataclass
@dataclass
class DeckSyncResult:
    """Resultado da sincroniza√ß√£o de um deck espec√≠fico."""

    deck_name: str
    deck_key: str
    deck_url: str
    success: bool
    stats: SyncStats
    was_new_deck: bool = False  # Se o deck era novo (nunca sincronizado)
    error_message: Optional[str] = None

    def __post_init__(self):
        """Inicializa√ß√£o ap√≥s cria√ß√£o."""
        if self.stats is None:
            self.stats = SyncStats()


class SyncStatsManager:
    """Gerenciador de estat√≠sticas de sincroniza√ß√£o."""

    def __init__(self):
        self.total_stats = SyncStats()
        self.deck_results: List[DeckSyncResult] = []

    def add_deck_result(self, result: DeckSyncResult) -> None:
        """Adiciona resultado de sincroniza√ß√£o de um deck."""
        self.deck_results.append(result)
        self.total_stats.merge(result.stats)

    def create_deck_result(self, deck_name: str, deck_key: str, deck_url: str = "") -> DeckSyncResult:
        """Cria um novo resultado de deck."""
        return DeckSyncResult(
            deck_name=deck_name, deck_key=deck_key, deck_url=deck_url, success=False, stats=SyncStats()
        )

    def get_successful_decks(self) -> List[DeckSyncResult]:
        """Retorna decks sincronizados com sucesso."""
        return [r for r in self.deck_results if r.success]

    def get_failed_decks(self) -> List[DeckSyncResult]:
        """Retorna decks que falharam na sincroniza√ß√£o."""
        return [r for r in self.deck_results if not r.success]

    def get_summary(self) -> Dict[str, Any]:
        """Retorna um resumo das estat√≠sticas."""
        successful = len(self.get_successful_decks())
        failed = len(self.get_failed_decks())

        return {
            "total_decks": len(self.deck_results),
            "successful_decks": successful,
            "failed_decks": failed,
            "total_stats": self.total_stats,  # Retornar diretamente o objeto SyncStats
            "has_changes": self.total_stats.has_changes(),
            "has_errors": self.total_stats.has_errors(),
        }

    def reset(self) -> None:
        """Reseta todas as estat√≠sticas."""
        self.total_stats = SyncStats()
        self.deck_results.clear()


# ========================================================================================
# FUN√á√ïES DE FINALIZA√á√ÉO DE SINCRONIZA√á√ÉO (consolidado de sync_finalization.py)
# ========================================================================================


def _finalize_sync_new(
    progress,
    total_decks,
    successful_decks,
    total_stats,
    sync_errors,
    cleanup_result=None,
    missing_cleanup_result=None,
    deck_results=None,
    new_deck_mode=False,
):
    """
    Finaliza o processo de sincroniza√ß√£o usando o novo sistema de estat√≠sticas.

    Args:
        progress: QProgressDialog instance
        total_decks: Total de decks para sync
        successful_decks: N√∫mero de decks sincronizados com sucesso
        total_stats: Estat√≠sticas totais da sincroniza√ß√£o
        sync_errors: Lista de erros de sincroniza√ß√£o
        cleanup_result: Resultado da limpeza (opcional)
        missing_cleanup_result: Resultado da limpeza de decks ausentes (opcional)
        deck_results: Lista de DeckSyncResult para visualiza√ß√£o por deck (opcional)

    Returns:
        Resultado consolidado da sincroniza√ß√£o
    """

    add_debug_message("üéØ _finalize_sync_new INICIADO", "SYNC")

    progress.setLabelText("Limpando subdecks vazios...")
    from .config_manager import get_remote_decks

    # Remover subdecks vazios
    remote_decks = get_remote_decks()
    removed_subdecks = remove_empty_subdecks(remote_decks)

    add_debug_message(
        "üîß Prestes a chamar apply_automatic_deck_options_system()", "SYNC"
    )
    # Aplicar sistema autom√°tico de op√ß√µes de deck
    from .utils import apply_automatic_deck_options_system

    options_result = apply_automatic_deck_options_system()
    add_debug_message(
        f"‚úÖ apply_automatic_deck_options_system() retornou: {options_result}", "SYNC"
    )

    # Preparar mensagem final para exibir na barra de progresso
    cleanup_info = ""
    if cleanup_result:
        cleanup_info = f", {cleanup_result['disabled_students_count']} alunos removidos"

    if missing_cleanup_result:
        if cleanup_info:
            cleanup_info += ", dados [MISSING A.] removidos"
        else:
            cleanup_info = ", dados [MISSING A.] removidos"

    # Gerar mensagem final baseada nas estat√≠sticas
    if sync_errors or total_stats.errors > 0:
        final_msg = f"Conclu√≠do com problemas: {successful_decks}/{total_decks} decks sincronizados"
        if total_stats.created > 0:
            final_msg += f", {total_stats.created} notas criadas"
        if total_stats.updated > 0:
            final_msg += f", {total_stats.updated} atualizadas"
        if total_stats.deleted > 0:
            final_msg += f", {total_stats.deleted} deletadas"
        if total_stats.ignored > 0:
            final_msg += f", {total_stats.ignored} ignoradas"
        if removed_subdecks > 0:
            final_msg += f", {removed_subdecks} subdecks vazios removidos"
        if cleanup_info:
            final_msg += cleanup_info
        final_msg += f", {total_stats.errors + len(sync_errors)} erros"
    else:
        final_msg = "Sincroniza√ß√£o conclu√≠da com sucesso!"
        if total_stats.created > 0:
            final_msg += f" {total_stats.created} notas criadas"
        if total_stats.updated > 0:
            final_msg += f", {total_stats.updated} atualizadas"
        if total_stats.deleted > 0:
            final_msg += f", {total_stats.deleted} deletadas"
        if total_stats.ignored > 0:
            final_msg += f", {total_stats.ignored} ignoradas"
        if removed_subdecks > 0:
            final_msg += f", {removed_subdecks} subdecks vazios removidos"
        if cleanup_info:
            final_msg += cleanup_info

    # Adicionar mensagem final de debug
    add_debug_message("üé¨ Sincroniza√ß√£o finalizada", "SYSTEM")

    # Atualizar a interface do Anki para mostrar as mudan√ßas
    ensure_interface_refresh()

    # Atualizar progresso final
    progress.setValue(total_decks)
    progress.setLabelText(final_msg)

    # Aguardar um momento para mostrar a mensagem final
    time.sleep(1)

    # Mostrar resumo detalhado PRIMEIRO (sem resultado AnkiWeb ainda)
    def execute_ankiweb_sync_after_close():
        """Callback para executar sincroniza√ß√£o AnkiWeb ap√≥s o usu√°rio fechar a janela de resumo"""
        # AP√ìS o usu√°rio fechar a janela, executar sincroniza√ß√£o AnkiWeb se configurada
        add_debug_message(
            "üîÑ Verificando configura√ß√£o de sincroniza√ß√£o AnkiWeb...", "SYNC"
        )
        try:
            from .ankiweb_sync import execute_ankiweb_sync_if_configured

            ankiweb_result = execute_ankiweb_sync_if_configured()

            if ankiweb_result:
                if ankiweb_result["success"]:
                    add_debug_message(
                        f"‚úÖ AnkiWeb sync: {ankiweb_result['message']}", "SYNC"
                    )
                else:
                    add_debug_message(
                        f"‚ùå AnkiWeb sync falhou: {ankiweb_result['error']}", "SYNC"
                    )
            else:
                add_debug_message("‚èπÔ∏è AnkiWeb sync desabilitado", "SYNC")
        except Exception as ankiweb_error:
            add_debug_message(
                f"‚ùå Erro na sincroniza√ß√£o AnkiWeb: {ankiweb_error}", "SYNC"
            )

    _show_sync_summary_new(
        sync_errors,
        total_stats,
        successful_decks,
        total_decks,
        removed_subdecks,
        cleanup_result,
        missing_cleanup_result,
        ankiweb_result=None,
        on_close_callback=execute_ankiweb_sync_after_close,
        deck_results=deck_results,
        new_deck_mode=new_deck_mode,
    )


def _show_sync_summary_new(
    sync_errors,
    total_stats,
    decks_synced,
    total_decks,
    removed_subdecks=0,
    cleanup_result=None,
    missing_cleanup_result=None,
    ankiweb_result=None,
    on_close_callback=None,
    deck_results=None,
    new_deck_mode=False,
):
    """
    Mostra resumo da sincroniza√ß√£o usando interface com scroll.

    Args:
        on_close_callback (callable, optional): Fun√ß√£o a ser chamada quando o di√°logo for fechado
        deck_results (list, optional): Lista de DeckSyncResult para visualiza√ß√£o por deck
    """

    summary = []

    # Estat√≠sticas principais
    if sync_errors or total_stats.errors > 0:
        summary.append("‚ùå Sincroniza√ß√£o conclu√≠da com problemas!")
        summary.append(
            f"üìä Decks: {decks_synced}/{total_decks} sincronizados com sucesso"
        )
    else:
        summary.append("‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso!")
        summary.append(f"üìä Decks: {decks_synced}/{total_decks} sincronizados")

    # Estat√≠sticas resumidas no cabe√ßalho
    if total_stats.created > 0:
        # Verificar se algum dos decks era novo (baseado na detec√ß√£o robusta por last_sync)
        new_decks_detected = False
        if deck_results:
            new_decks_detected = any(result.was_new_deck for result in deck_results if result.success)
        
        if new_decks_detected:
            if total_decks == 1:
                summary.append(f"‚ûï {total_stats.created} notas criadas (novo deck adicionado)")
            else:
                summary.append(f"‚ûï {total_stats.created} notas criadas (inclui novos decks)")
        else:
            summary.append(f"‚ûï {total_stats.created} notas criadas")

    if total_stats.updated > 0:
        summary.append(f"‚úèÔ∏è {total_stats.updated} notas atualizadas")

    if total_stats.deleted > 0:
        summary.append(f"üóëÔ∏è {total_stats.deleted} notas deletadas")

    if total_stats.ignored > 0:
        summary.append(f"‚è≠Ô∏è {total_stats.ignored} notas ignoradas")

    # Limpezas
    if removed_subdecks > 0:
        summary.append(f"üßπ {removed_subdecks} subdecks vazios removidos")

    if cleanup_result and cleanup_result.get("disabled_students_count", 0) > 0:
        summary.append(
            f"üßπ {cleanup_result['disabled_students_count']} alunos desabilitados removidos"
        )

    if missing_cleanup_result:
        summary.append("üßπ Dados [MISSING A.] removidos")

    # Sincroniza√ß√£o AnkiWeb
    if ankiweb_result is not None:
        if ankiweb_result.get("success", False):
            summary.append(
                "üîÑ AnkiWeb: Sincroniza√ß√£o iniciada (detectando mudan√ßas automaticamente)"
            )
        elif "error" in ankiweb_result:
            summary.append(
                f"‚ùå AnkiWeb: Falha na sincroniza√ß√£o - {ankiweb_result['error']}"
            )
    else:
        # Verificar se est√° configurado mas n√£o executou
        try:
            from .config_manager import get_ankiweb_sync_mode

            sync_mode = get_ankiweb_sync_mode()
            if sync_mode == "disabled":
                summary.append("‚èπÔ∏è AnkiWeb: Sincroniza√ß√£o autom√°tica desabilitada")
        except:
            pass

    # Erros
    sync_errors = sync_errors or []
    total_errors = total_stats.errors + len(sync_errors)
    if total_errors > 0:
        summary.append(f"‚ö†Ô∏è {total_errors} erros encontrados")

    # Sempre usar interface com scroll
    _show_sync_summary_with_scroll(
        summary,
        total_stats,
        removed_subdecks,
        cleanup_result,
        missing_cleanup_result,
        sync_errors,
        ankiweb_result,
        on_close_callback,
        deck_results,
    )


def generate_simplified_view(total_stats, sync_errors=None, deck_results=None):
    """
    Gera visualiza√ß√£o simplificada (agregada) das estat√≠sticas de sincroniza√ß√£o.
    
    Args:
        total_stats: Estat√≠sticas totais agregadas
        sync_errors: Lista de erros de sincroniza√ß√£o
        deck_results: Lista de resultados por deck (n√£o usado no modo simplificado)
    
    Returns:
        list: Lista de strings para exibi√ß√£o
    """
    details_content = []

    # PRIMEIRO: M√©tricas detalhadas do deck remoto (agregadas)
    if (
        total_stats.remote_total_table_lines > 0
        or total_stats.remote_valid_note_lines > 0
        or total_stats.remote_sync_marked_lines > 0
        or total_stats.remote_total_potential_anki_notes > 0
    ):
        details_content.append("üìä M√âTRICAS DETALHADAS DOS DECKS REMOTOS:")
        details_content.append("=" * 60)
        details_content.append(
            f"üìã 1. Total de linhas na tabela: {total_stats.remote_total_table_lines}"
        )
        details_content.append(
            f"‚úÖ 2. Linhas com notas v√°lidas (ID preenchido): {total_stats.remote_valid_note_lines}"
        )
        details_content.append(
            f"‚ùå 3. Linhas inv√°lidas (ID vazio): {total_stats.remote_invalid_note_lines}"
        )
        details_content.append(
            f"üîÑ 4. Linhas marcadas para sincroniza√ß√£o: {total_stats.remote_sync_marked_lines}"
        )
        details_content.append(
            f"üìù 5. Total potencial de notas no Anki: {total_stats.remote_total_potential_anki_notes}"
        )
        details_content.append(
            f"üéì 6. Potencial de notas para alunos espec√≠ficos: {total_stats.remote_potential_student_notes}"
        )
        details_content.append(
            f"‚ùì 7. Potencial de notas para [MISSING A.]: {total_stats.remote_potential_missing_a_notes}"
        )
        details_content.append(
            f"üë• 8. Total de alunos √∫nicos: {total_stats.remote_unique_students_count}"
        )

        # 9. Mostrar notas por aluno individual
        if total_stats.remote_notes_per_student:
            details_content.append("üìä 9. Notas por aluno (totais agregados):")
            for student, count in sorted(total_stats.remote_notes_per_student.items()):
                details_content.append(f"   ‚Ä¢ {student}: {count} notas")

        details_content.append("")

    # SEGUNDO: Erros detalhados (se houver)
    if sync_errors or total_stats.error_details:
        total_errors = total_stats.errors + len(sync_errors or [])
        if total_errors > 0:
            details_content.append(f"‚ö†Ô∏è DETALHES DOS {total_errors} ERROS:")
            details_content.append("=" * 60)
            error_count = 1
            for error in sync_errors or []:
                details_content.append(f"{error_count:4d}. {error}")
                error_count += 1
            for error in total_stats.error_details:
                details_content.append(f"{error_count:4d}. {error}")
                error_count += 1
            details_content.append("")

    # POR √öLTIMO: Detalhes das notas criadas
    if total_stats.created > 0 and total_stats.creation_details:
        details_content.append(f"‚ûï DETALHES DAS {total_stats.created} NOTAS CRIADAS:")
        details_content.append("=" * 60)
        for i, detail in enumerate(total_stats.creation_details, 1):
            details_content.append(
                f"{i:4d}. {detail['student']}: {detail['note_id']} - {detail['pergunta']}"
            )
        details_content.append("")

    # POR √öLTIMO: Detalhes das notas atualizadas
    if total_stats.updated > 0 and total_stats.update_details:
        details_content.append(
            f"‚úèÔ∏è DETALHES DAS {total_stats.updated} NOTAS ATUALIZADAS:"
        )
        details_content.append("=" * 60)
        for i, detail in enumerate(total_stats.update_details, 1):
            details_content.append(f"{i:4d}. {detail['student']}: {detail['note_id']}")
            for j, change in enumerate(detail["changes"], 1):
                details_content.append(f"      {j:2d}. {change}")
            details_content.append("")

    # POR √öLTIMO: Detalhes das notas removidas
    if total_stats.deleted > 0 and total_stats.deletion_details:
        details_content.append(f"üóëÔ∏è DETALHES DAS {total_stats.deleted} NOTAS REMOVIDAS:")
        details_content.append("=" * 60)
        for i, detail in enumerate(total_stats.deletion_details, 1):
            details_content.append(
                f"{i:4d}. {detail['student']}: {detail['note_id']} - {detail['pergunta']}"
            )
        details_content.append("")

    # Se n√£o h√° detalhes de modifica√ß√µes, mostrar mensagem informativa
    if not any(
        [
            total_stats.created > 0 and total_stats.creation_details,
            total_stats.updated > 0 and total_stats.update_details,
            total_stats.deleted > 0 and total_stats.deletion_details,
            sync_errors or total_stats.error_details,
        ]
    ):
        details_content.append(
            "‚ÑπÔ∏è Nenhuma modifica√ß√£o detalhada de notas foi registrada nesta sincroniza√ß√£o."
        )
        details_content.append("")
        details_content.append("Isso pode acontecer quando:")
        details_content.append("‚Ä¢ As notas j√° estavam atualizadas")
        details_content.append("‚Ä¢ Apenas opera√ß√µes de limpeza foram realizadas")
        details_content.append("‚Ä¢ N√£o houve altera√ß√µes nos dados das planilhas")

    return details_content


def generate_aggregated_summary_only(total_stats, sync_errors=None):
    """
    Gera apenas o resumo agregado sem detalhes de notas individuais.
    Usado no modo detalhado para evitar duplica√ß√£o.
    
    Args:
        total_stats: Estat√≠sticas totais agregadas
        sync_errors: Lista de erros de sincroniza√ß√£o
    
    Returns:
        list: Lista de strings para exibi√ß√£o
    """
    details_content = []

    # Erros detalhados (se houver)
    if sync_errors or total_stats.error_details:
        total_errors = total_stats.errors + len(sync_errors or [])
        if total_errors > 0:
            details_content.append(f"‚ö†Ô∏è DETALHES DOS {total_errors} ERROS GERAIS:")
            details_content.append("=" * 60)
            error_count = 1
            for error in sync_errors or []:
                details_content.append(f"{error_count:4d}. {error}")
                error_count += 1
            for error in total_stats.error_details:
                details_content.append(f"{error_count:4d}. {error}")
                error_count += 1
            details_content.append("")

    # M√©tricas detalhadas do deck remoto (agregadas) - apenas se n√£o foram mostradas por deck
    if (
        total_stats.remote_total_table_lines > 0
        or total_stats.remote_valid_note_lines > 0
        or total_stats.remote_sync_marked_lines > 0
        or total_stats.remote_total_potential_anki_notes > 0
    ):
        details_content.append("üìä TOTAIS AGREGADOS DE M√âTRICAS REMOTAS:")
        details_content.append("=" * 60)
        details_content.append(
            f"üìã 1. Total de linhas na tabela: {total_stats.remote_total_table_lines}"
        )
        details_content.append(
            f"‚úÖ 2. Linhas com notas v√°lidas (ID preenchido): {total_stats.remote_valid_note_lines}"
        )
        details_content.append(
            f"‚ùå 3. Linhas inv√°lidas (ID vazio): {total_stats.remote_invalid_note_lines}"
        )
        details_content.append(
            f"üîÑ 4. Linhas marcadas para sincroniza√ß√£o: {total_stats.remote_sync_marked_lines}"
        )
        details_content.append(
            f"üìù 5. Total potencial de notas no Anki: {total_stats.remote_total_potential_anki_notes}"
        )
        details_content.append(
            f"üéì 6. Potencial de notas para alunos espec√≠ficos: {total_stats.remote_potential_student_notes}"
        )
        details_content.append(
            f"‚ùì 7. Potencial de notas para [MISSING A.]: {total_stats.remote_potential_missing_a_notes}"
        )
        details_content.append(
            f"üë• 8. Total de alunos √∫nicos: {total_stats.remote_unique_students_count}"
        )

        # 9. Mostrar notas por aluno individual
        if total_stats.remote_notes_per_student:
            details_content.append("üìä 9. Notas por aluno (totais agregados):")
            for student, count in sorted(total_stats.remote_notes_per_student.items()):
                details_content.append(f"   ‚Ä¢ {student}: {count} notas")

        details_content.append("")

    return details_content


def generate_deck_detailed_metrics(stats, deck_name):
    """
    Gera m√©tricas detalhadas completas para um deck individual.
    
    Args:
        stats: Estat√≠sticas do deck individual (SyncStats)
        deck_name: Nome do deck
    
    Returns:
        list: Lista de strings com as m√©tricas detalhadas
    """
    metrics_content = []
    
    # Estat√≠sticas b√°sicas de modifica√ß√µes
    modifications = []
    if stats.created > 0:
        modifications.append(f"{stats.created} criadas")
    if stats.updated > 0:
        modifications.append(f"{stats.updated} atualizadas")
    if stats.deleted > 0:
        modifications.append(f"{stats.deleted} deletadas")
    if stats.ignored > 0:
        modifications.append(f"{stats.ignored} ignoradas")
    if stats.unchanged > 0:
        modifications.append(f"{stats.unchanged} inalteradas")
    if stats.skipped > 0:
        modifications.append(f"{stats.skipped} puladas")
    if stats.errors > 0:
        modifications.append(f"{stats.errors} erros")
    
    if modifications:
        metrics_content.append(f"     üìù Notas: {', '.join(modifications)}")
    
    # Todas as 9 m√©tricas detalhadas do deck remoto (igual ao modo simplificado)
    if (
        stats.remote_total_table_lines > 0
        or stats.remote_valid_note_lines > 0
        or stats.remote_sync_marked_lines > 0
        or stats.remote_total_potential_anki_notes > 0
    ):
        metrics_content.append(f"     üìä M√©tricas da Planilha Remota:")
        metrics_content.append(f"        üìã 1. Total de linhas na tabela: {stats.remote_total_table_lines}")
        metrics_content.append(f"        ‚úÖ 2. Linhas com notas v√°lidas (ID preenchido): {stats.remote_valid_note_lines}")
        metrics_content.append(f"        ‚ùå 3. Linhas inv√°lidas (ID vazio): {stats.remote_invalid_note_lines}")
        metrics_content.append(f"        üîÑ 4. Linhas marcadas para sincroniza√ß√£o: {stats.remote_sync_marked_lines}")
        metrics_content.append(f"        üìù 5. Total potencial de notas no Anki: {stats.remote_total_potential_anki_notes}")
        metrics_content.append(f"        üéì 6. Potencial de notas para alunos espec√≠ficos: {stats.remote_potential_student_notes}")
        metrics_content.append(f"        ‚ùì 7. Potencial de notas para [MISSING A.]: {stats.remote_potential_missing_a_notes}")
        metrics_content.append(f"        üë• 8. Total de alunos √∫nicos: {stats.remote_unique_students_count}")
        
        # 9. Mostrar notas por aluno individual para este deck
        if stats.remote_notes_per_student:
            metrics_content.append(f"        üìä 9. Notas por aluno neste deck:")
            for student, count in sorted(stats.remote_notes_per_student.items()):
                metrics_content.append(f"           ‚Ä¢ {student}: {count} notas")
    
    # DETALHES DAS NOTAS AP√ìS AS M√âTRICAS REMOTAS (individualizado por deck)
    
    # Detalhes das notas criadas neste deck
    if stats.created > 0 and stats.creation_details:
        metrics_content.append(f"     ‚ûï DETALHES DAS {stats.created} NOTAS CRIADAS:")
        for i, detail in enumerate(stats.creation_details, 1):
            metrics_content.append(f"        {i:2d}. {detail['student']}: {detail['note_id']} - {detail['pergunta']}")
    
    # Detalhes das notas atualizadas neste deck
    if stats.updated > 0 and stats.update_details:
        metrics_content.append(f"     ‚úèÔ∏è DETALHES DAS {stats.updated} NOTAS ATUALIZADAS:")
        for i, detail in enumerate(stats.update_details, 1):
            metrics_content.append(f"        {i:2d}. {detail['student']}: {detail['note_id']}")
            for j, change in enumerate(detail["changes"], 1):
                metrics_content.append(f"           {j:2d}. {change}")
    
    # Detalhes das notas removidas neste deck
    if stats.deleted > 0 and stats.deletion_details:
        metrics_content.append(f"     üóëÔ∏è DETALHES DAS {stats.deleted} NOTAS REMOVIDAS:")
        for i, detail in enumerate(stats.deletion_details, 1):
            metrics_content.append(f"        {i:2d}. {detail['student']}: {detail['note_id']} - {detail['pergunta']}")
    
    return metrics_content


def generate_detailed_view(total_stats, sync_errors=None, deck_results=None):
    """
    Gera visualiza√ß√£o detalhada (por deck) das estat√≠sticas de sincroniza√ß√£o.
    
    Args:
        total_stats: Estat√≠sticas totais agregadas
        sync_errors: Lista de erros de sincroniza√ß√£o
        deck_results: Lista de resultados por deck individual
    
    Returns:
        list: Lista de strings para exibi√ß√£o
    """
    details_content = []

    # PRIMEIRO: Mostrar resumo geral agregado
    aggregated_summary = generate_aggregated_summary_only(total_stats, sync_errors)
    
    if aggregated_summary:
        details_content.append("üìã RESUMO GERAL AGREGADO:")
        details_content.append("=" * 80)
        details_content.append("\n")
        details_content.extend(aggregated_summary)
        details_content.append("")

    # SEGUNDO: Mostrar resumo por deck individual (com detalhes das notas individualizados)
    if deck_results and len(deck_results) >= 1:
        details_content.append("üìä RESUMO POR DECK INDIVIDUAL:")
        details_content.append("=" * 80)
        
        for i, deck_result in enumerate(deck_results, 1):
            deck_name = deck_result.deck_name
            stats = deck_result.stats
            success_status = "‚úÖ" if deck_result.success else "‚ùå"
            
            # Indicar se o deck era novo durante esta sincroniza√ß√£o
            new_deck_indicator = " (NOVO DECK)" if deck_result.was_new_deck else ""
            
            details_content.append(f"{i:2d}. {success_status} {deck_name}{new_deck_indicator}")
            
            # Gerar todas as m√©tricas detalhadas para este deck (inclui detalhes das notas)
            deck_metrics = generate_deck_detailed_metrics(stats, deck_name)
            details_content.extend(deck_metrics)
            
            # Se houver erro espec√≠fico do deck, mostrar
            if not deck_result.success and hasattr(deck_result, 'error_message') and deck_result.error_message:
                details_content.append(f"     ‚ùå Erro: {deck_result.error_message}")
            
            details_content.append("")
        
        details_content.append("=" * 80)
    
    return details_content


def _show_sync_summary_with_scroll(
    base_summary,
    total_stats,
    removed_subdecks=0,
    cleanup_result=None,
    missing_cleanup_result=None,
    sync_errors=None,
    ankiweb_result=None,
    on_close_callback=None,
    deck_results=None,
):
    """
    Mostra resumo da sincroniza√ß√£o com interface scroll√°vel.

    Args:
        on_close_callback (callable, optional): Fun√ß√£o a ser chamada quando o di√°logo for fechado
        deck_results (list, optional): Lista de DeckSyncResult para visualiza√ß√£o por deck
    """
    from .compat import Palette_Window
    from .compat import QButtonGroup
    from .compat import QRadioButton
    from .compat import QHBoxLayout

    # Criar dialog customizado
    dialog = QDialog()
    dialog.setWindowTitle("Resumo da Sincroniza√ß√£o")
    dialog.setMinimumSize(800, 600)
    dialog.resize(1000, 700)

    # Conectar callback ao fechamento se fornecido
    if on_close_callback and callable(on_close_callback):
        dialog.finished.connect(on_close_callback)

    # Detectar dark mode baseado na cor de fundo padr√£o do sistema
    palette = dialog.palette()
    bg_color = palette.color(Palette_Window)
    is_dark_mode = bg_color.lightness() < 128

    # Aplicar estilo geral do dialog baseado no tema
    if is_dark_mode:
        dialog.setStyleSheet(
            """
            QDialog {
                background-color: #2b2b2b;
                color: #ffffff;
            }
        """
        )
    else:
        dialog.setStyleSheet(
            """
            QDialog {
                background-color: #ffffff;
                color: #000000;
            }
        """
        )

    layout = QVBoxLayout()

    # Cabe√ßalho com informa√ß√µes principais
    header_text = "\n".join(base_summary)
    header_label = QLabel(header_text)

    # Estilos adapt√°veis para dark mode
    header_style = """
        QLabel {
            font-weight: bold; 
            padding: 15px; 
            border-radius: 8px;
            margin-bottom: 5px;
        }
    """

    if is_dark_mode:
        header_style += """
            background-color: #3a3a3a;
            color: #ffffff;
            border: 1px solid #555555;
        """
    else:
        header_style += """
            background-color: #f0f0f0;
            color: #000000;
            border: 1px solid #cccccc;
        """

    header_label.setStyleSheet(header_style)
    layout.addWidget(header_label)

    # Se√ß√£o de radiobuttons para escolher o formato de exibi√ß√£o
    view_group_box = QGroupBox("Formato de Exibi√ß√£o")
    view_layout = QHBoxLayout()
    
    # Radiobuttons
    simplified_radio = QRadioButton("Simplificado")
    detailed_radio = QRadioButton("Completo")
    
    # Sempre mostrar simplificado por padr√£o (como solicitado pelo usu√°rio)
    simplified_radio.setChecked(True)
    
    # Agrupar radiobuttons
    radio_group = QButtonGroup()
    radio_group.addButton(simplified_radio)
    radio_group.addButton(detailed_radio)
    
    view_layout.addWidget(simplified_radio)
    view_layout.addWidget(detailed_radio)
    view_group_box.setLayout(view_layout)
    layout.addWidget(view_group_box)

    # √Årea de texto com scroll para detalhes
    details_text = QTextEdit()
    details_text.setReadOnly(True)

    def update_details_view():
        """Atualiza a visualiza√ß√£o dos detalhes baseado na sele√ß√£o do radiobutton."""
        details_content = []
        
        if simplified_radio.isChecked():
            # Modo Simplificado - mostra dados agregados
            details_content = generate_simplified_view(
                total_stats, sync_errors, deck_results
            )
        else:
            # Modo Completo - mostra dados por deck individual
            details_content = generate_detailed_view(
                total_stats, sync_errors, deck_results
            )
        
        details_text.setPlainText("\n".join(details_content))

    # Conectar mudan√ßas de radiobutton √† atualiza√ß√£o da view
    simplified_radio.toggled.connect(update_details_view)
    detailed_radio.toggled.connect(update_details_view)

    # Definir conte√∫do inicial (simplificado)
    update_details_view()

    # Estilos adapt√°veis para a √°rea de texto
    text_style = """
        QTextEdit {
            font-family: 'Monaco', 'Consolas', 'Courier New', monospace; 
            font-size: 11pt; 
            padding: 15px;
            border-radius: 5px;
            border: 1px solid;
        }
    """

    if is_dark_mode:
        text_style += """
            background-color: #2b2b2b;
            color: #ffffff;
            border-color: #555555;
            selection-background-color: #404040;
        """
    else:
        text_style += """
            background-color: #ffffff;
            color: #000000;
            border-color: #cccccc;
            selection-background-color: #b3d7ff;
        """

    details_text.setStyleSheet(text_style)
    layout.addWidget(details_text)

    # Bot√£o para fechar adapt√°vel ao dark mode
    close_button = QPushButton("Fechar")

    button_style = """
        QPushButton {
            padding: 12px 25px; 
            font-size: 12pt; 
            font-weight: bold;
            border-radius: 6px;
            border: 2px solid;
            margin-top: 10px;
        }
        QPushButton:hover {
            border-width: 3px;
        }
        QPushButton:pressed {
            padding: 13px 24px 11px 26px;
        }
    """

    if is_dark_mode:
        button_style += """
            background-color: #4a4a4a;
            color: #ffffff;
            border-color: #666666;
        }
        QPushButton:hover {
            background-color: #5a5a5a;
            border-color: #777777;
        }
        QPushButton:pressed {
            background-color: #3a3a3a;
        """
    else:
        button_style += """
            background-color: #f0f0f0;
            color: #000000;
            border-color: #cccccc;
        }
        QPushButton:hover {
            background-color: #e0e0e0;
            border-color: #999999;
        }
        QPushButton:pressed {
            background-color: #d0d0d0;
        """

    close_button.setStyleSheet(button_style)
    close_button.clicked.connect(dialog.accept)
    layout.addWidget(close_button)

    dialog.setLayout(layout)
    safe_exec_dialog(dialog)


# ========================================================================================
# FUN√á√ïES DE ATUALIZA√á√ÉO DA INTERFACE (consolidado de interface_updater.py)
# ========================================================================================


def refresh_anki_interface():
    """
    Atualiza a interface do Anki ap√≥s a sincroniza√ß√£o.

    Atualiza:
    - Lista de decks na tela principal
    - Contador de cards
    - Interface do reviewer se estiver ativo
    - Browser se estiver aberto
    """
    if not mw:
        add_debug_message(
            "‚ùå MainWindow n√£o dispon√≠vel para atualiza√ß√£o", "INTERFACE_UPDATE"
        )
        return

    try:
        add_debug_message(
            "üîÑ Iniciando atualiza√ß√£o da interface do Anki", "INTERFACE_UPDATE"
        )

        # 1. Atualizar a lista de decks na tela principal
        if hasattr(mw, "deckBrowser") and mw.deckBrowser:
            add_debug_message("üìÇ Atualizando lista de decks", "INTERFACE_UPDATE")
            mw.deckBrowser.refresh()

        # 2. Atualizar o reviewer se estiver ativo
        if hasattr(mw, "reviewer") and mw.reviewer and mw.state == "review":
            add_debug_message("üìù Atualizando reviewer", "INTERFACE_UPDATE")
            # For√ßar recalculo do n√∫mero de cards
            if hasattr(mw.reviewer, "_updateCounts"):
                mw.reviewer._updateCounts()

        # 3. Atualizar o browser se estiver aberto
        if hasattr(mw, "browser") and mw.browser:
            add_debug_message("üîç Atualizando browser", "INTERFACE_UPDATE")
            mw.browser.model.reset()
            mw.browser.form.tableView.selectRow(0)

        # 4. Atualizar a barra de t√≠tulo e interface geral
        if hasattr(mw, "setWindowTitle") and mw.col:
            # Manter o t√≠tulo original mas for√ßar recalculo interno
            mw.col.reset()

        # 5. Trigger geral de reset da interface
        if hasattr(mw, "reset"):
            add_debug_message(
                "üîÑ Executando reset geral da interface", "INTERFACE_UPDATE"
            )
            mw.reset()

        add_debug_message(
            "‚úÖ Interface do Anki atualizada com sucesso", "INTERFACE_UPDATE"
        )

    except Exception as e:
        add_debug_message(f"‚ùå Erro ao atualizar interface: {e}", "INTERFACE_UPDATE")


def refresh_deck_list():
    """
    Atualiza especificamente a lista de decks na tela principal.
    """
    if not mw or not hasattr(mw, "deckBrowser"):
        return

    try:
        add_debug_message("üìÇ Atualizando lista de decks", "INTERFACE_UPDATE")
        mw.deckBrowser.refresh()
    except Exception as e:
        add_debug_message(
            f"‚ùå Erro ao atualizar lista de decks: {e}", "INTERFACE_UPDATE"
        )


def refresh_counts():
    """
    Atualiza os contadores de cards em todas as interfaces.
    """
    if not mw:
        return

    try:
        add_debug_message("üî¢ Atualizando contadores de cards", "INTERFACE_UPDATE")

        # For√ßar rec√°lculo dos counts na collection
        if mw.col:
            mw.col.sched.reset()

        # Atualizar deck browser
        if hasattr(mw, "deckBrowser") and mw.deckBrowser:
            mw.deckBrowser.refresh()

        # Atualizar reviewer se ativo
        if hasattr(mw, "reviewer") and mw.reviewer and mw.state == "review":
            if hasattr(mw.reviewer, "_updateCounts"):
                mw.reviewer._updateCounts()

    except Exception as e:
        add_debug_message(f"‚ùå Erro ao atualizar contadores: {e}", "INTERFACE_UPDATE")


def ensure_interface_refresh():
    """
    Garante que a interface seja atualizada, usando m√∫ltiplas estrat√©gias.

    Esta fun√ß√£o usa diferentes m√©todos para garantir que a interface
    seja atualizada independente do estado atual do Anki.
    """
    if not mw:
        return

    try:
        add_debug_message(
            "üéØ Executando atualiza√ß√£o completa da interface", "INTERFACE_UPDATE"
        )

        # M√©todo 1: Reset da collection (mais completo)
        if mw.col:
            mw.col.reset()

        # M√©todo 2: Reset da interface principal
        if hasattr(mw, "reset"):
            mw.reset()

        # M√©todo 3: Atualiza√ß√£o espec√≠fica dos componentes
        refresh_deck_list()
        refresh_counts()

        add_debug_message(
            "‚úÖ Atualiza√ß√£o completa da interface conclu√≠da", "INTERFACE_UPDATE"
        )

    except Exception as e:
        add_debug_message(f"‚ùå Erro na atualiza√ß√£o completa: {e}", "INTERFACE_UPDATE")


# ========================================================================================
# FUN√á√ïES PRINCIPAIS DE SINCRONIZA√á√ÉO
# ========================================================================================


def _is_anki_ready():
    """Verifica se o Anki est√° pronto para opera√ß√µes."""
    return mw and hasattr(mw, "col") and mw.col


def _is_anki_decks_ready():
    """Verifica se o Anki est√° pronto para opera√ß√µes com decks."""
    return _is_anki_ready() and hasattr(mw.col, "decks")


def syncDecks(selected_deck_names=None, selected_deck_urls=None, new_deck_mode=False):
    """
    Sincroniza todos os decks remotos com suas fontes.

    Esta √© a fun√ß√£o principal de sincroniza√ß√£o que:
    1. Verifica se h√° alunos desabilitados que precisam ter dados removidos
    2. Baixa dados dos decks remotos
    3. Processa e valida os dados
    4. Atualiza o banco de dados do Anki
    5. Mostra progresso ao usu√°rio
    6. Atualiza nomes automaticamente se configurado

    Args:
        selected_deck_names: Lista de nomes de decks para sincronizar.
                           Se None, sincroniza todos os decks.
        selected_deck_urls: Lista de URLs de decks para sincronizar.
                          Se fornecida, tem preced√™ncia sobre selected_deck_names.
        new_deck_mode: Se True, indica que esta sincroniza√ß√£o √© para um deck rec√©m-adicionado.
    """
    # Verificar se mw.col est√° dispon√≠vel
    if not _is_anki_ready():
        showInfo("Anki n√£o est√° pronto. Tente novamente em alguns instantes.")
        return

    col = mw.col
    remote_decks = get_remote_decks()

    # Limpar mensagens de debug anteriores
    clear_debug_messages()

    # **NOVO**: Atualizar templates de note types existentes antes da sincroniza√ß√£o
    try:
        add_debug_message("üîÑ Atualizando templates de note types existentes...", "SYNC")
        updated_count = update_existing_note_type_templates(col, [])
        add_debug_message(f"‚úÖ {updated_count} note types atualizados com sucesso", "SYNC")
    except Exception as e:
        add_debug_message(f"‚ö†Ô∏è Erro ao atualizar templates: {e}", "SYNC")
        # Continuar a sincroniza√ß√£o mesmo se houver erro na atualiza√ß√£o dos templates

    # **NOVO**: Gerenciar limpezas de forma consolidada para evitar m√∫ltiplas confirma√ß√µes
    missing_cleanup_result, cleanup_result = _handle_consolidated_cleanup(remote_decks)

    # Inicializar sistema de estat√≠sticas
    stats_manager = SyncStatsManager()
    sync_errors = []
    status_msgs = []

    # Determinar quais decks sincronizar
    deck_keys = _get_deck_keys_to_sync(
        remote_decks, selected_deck_names, selected_deck_urls
    )
    total_decks = len(deck_keys)

    # Verificar se h√° decks para sincronizar
    if total_decks == 0:
        _show_no_decks_message(selected_deck_names)
        return

    # Configurar e mostrar barra de progresso
    progress = _setup_progress_dialog(total_decks)

    # Adicionar mensagem de debug inicial
    add_debug_message(
        f"üé¨ SISTEMA DE DEBUG ATIVADO - Total de decks: {total_decks}", "SYNC"
    )
    _update_progress_text(progress, status_msgs)

    step = 0
    try:
        # Sincronizar cada deck
        for deckKey in deck_keys:
            try:
                step, deck_sync_increment, current_stats = _sync_single_deck(
                    remote_decks,
                    deckKey,
                    progress,
                    status_msgs,
                    step,
                    debug_messages=[],
                )

                # Criar resultado do deck
                deck_name = remote_decks[deckKey].get("local_deck_name", "Unknown")
                deck_url = remote_decks[deckKey].get("remote_deck_url", "")
                
                # Verificar se o deck era novo e atualizar status de sincroniza√ß√£o
                from .config_manager import update_deck_sync_status
                was_new_deck = update_deck_sync_status(deck_url, success=True)
                
                deck_result = DeckSyncResult(
                    deck_name=deck_name,
                    deck_key=deckKey,
                    deck_url=deck_url,
                    success=True,
                    stats=current_stats,
                    was_new_deck=was_new_deck,
                )
                stats_manager.add_deck_result(deck_result)

                add_debug_message(f"‚úÖ Deck conclu√≠do: {deckKey}", "SYNC")

            except SyncError as e:
                step, sync_errors = _handle_sync_error(
                    e, deckKey, remote_decks, progress, status_msgs, sync_errors, step
                )

                # Adicionar resultado de falha
                deck_name = remote_decks[deckKey].get("local_deck_name", "Unknown")
                deck_url = remote_decks[deckKey].get("remote_deck_url", "")
                failed_result = DeckSyncResult(
                    deck_name=deck_name,
                    deck_key=deckKey,
                    deck_url=deck_url,
                    success=False,
                    stats=SyncStats(),
                    error_message=str(e),
                )
                failed_result.stats.add_error(str(e))
                stats_manager.add_deck_result(failed_result)
                continue

            except Exception as e:
                step, sync_errors = _handle_unexpected_error(
                    e, deckKey, remote_decks, progress, status_msgs, sync_errors, step
                )

                # Adicionar resultado de erro inesperado
                deck_name = remote_decks[deckKey].get("local_deck_name", "Unknown")
                deck_url = remote_decks[deckKey].get("remote_deck_url", "")
                failed_result = DeckSyncResult(
                    deck_name=deck_name,
                    deck_key=deckKey,
                    deck_url=deck_url,
                    success=False,
                    stats=SyncStats(),
                    error_message=f"Erro inesperado: {str(e)}",
                )
                failed_result.stats.add_error(f"Erro inesperado: {str(e)}")
                stats_manager.add_deck_result(failed_result)
                continue

        # N√£o precisamos salvar remote_decks aqui porque add_note_type_id_to_deck j√° salva individualmente
        # e essa chamada sobrescreveria os note_type_ids que foram adicionados

        # Mas precisamos salvar as atualiza√ß√µes de local_deck_name que foram feitas durante a sincroniza√ß√£o
        from .config_manager import get_meta
        from .config_manager import save_meta

        try:
            current_meta = get_meta()
            save_meta(current_meta)
        except Exception as e:
            print(f"[WARNING] Erro ao salvar configura√ß√µes ap√≥s sincroniza√ß√£o: {e}")

        # Obter resumo das estat√≠sticas
        summary = stats_manager.get_summary()
        successful_decks = len(stats_manager.get_successful_decks())
        deck_results = stats_manager.deck_results  # Obter resultados por deck

        add_debug_message(
            f"üéØ Chamando _finalize_sync_new - successful_decks: {successful_decks}, total_decks: {total_decks}",
            "SYNC",
        )
        # Finalizar progresso e mostrar resultados
        _finalize_sync_new(
            progress,
            total_decks,
            successful_decks,
            summary["total_stats"],
            sync_errors,
            cleanup_result,
            missing_cleanup_result,
            deck_results,
            new_deck_mode=new_deck_mode,
        )

    finally:
        # Garantir que o dialog de progresso seja fechado
        if progress.isVisible():
            progress.close()


def _get_deck_keys_to_sync(remote_decks, selected_deck_names, selected_deck_urls=None):
    """
    Determina quais chaves de deck devem ser sincronizadas.
    Agora trabalha com hash keys da nova estrutura.

    Args:
        remote_decks: Dicion√°rio de decks remotos (hash_key -> deck_info)
        selected_deck_names: Nomes dos decks selecionados ou None
        selected_deck_urls: URLs dos decks selecionados ou None

    Returns:
        list: Lista de hash keys a serem sincronizadas
    """

    # Se URLs espec√≠ficas foram fornecidas, converter para hash keys
    if selected_deck_urls is not None:
        filtered_keys = []
        for url in selected_deck_urls:
            # Gerar hash da chave de publica√ß√£o
            url_hash = get_publication_key_hash(url)

            if url_hash in remote_decks:
                filtered_keys.append(url_hash)
        return filtered_keys

    # Verificar se mw.col e mw.col.decks est√£o dispon√≠veis
    if not _is_anki_decks_ready():
        return []

    assert mw.col is not None  # Type hint para o checker

    # Criar mapeamento de nomes para hash keys
    name_to_key = {}
    for hash_key, deck_info in remote_decks.items():
        # Verificar se o deck ainda existe
        local_deck_id = deck_info.get("local_deck_id")
        deck = mw.col.decks.get(local_deck_id) if local_deck_id is not None else None

        if deck:
            # Usar nome atual do deck
            actual_deck_name = deck["name"]
            name_to_key[actual_deck_name] = hash_key

            # Tamb√©m mapear nome da configura√ß√£o se diferente
            config_deck_name = deck_info.get("local_deck_name")
            if config_deck_name and config_deck_name != actual_deck_name:
                name_to_key[config_deck_name] = hash_key

    # Se nomes espec√≠ficos foram selecionados, filtrar por eles
    if selected_deck_names is not None:
        filtered_keys = []
        for deck_name in selected_deck_names:
            if deck_name in name_to_key:
                filtered_keys.append(name_to_key[deck_name])
        return filtered_keys

    # Caso contr√°rio, retornar todas as hash keys
    return list(remote_decks.keys())


def _show_no_decks_message(selected_deck_names):
    """Mostra mensagem quando n√£o h√° decks para sincronizar."""
    if selected_deck_names is not None:
        showInfo(
            f"Nenhum dos decks selecionados foi encontrado na configura√ß√£o.\n\nDecks selecionados: {', '.join(selected_deck_names)}"
        )
    else:
        showInfo("Nenhum deck remoto configurado para sincroniza√ß√£o.")


def _setup_progress_dialog(total_decks):
    """
    Configura e retorna o dialog de progresso com tamanho ampliado.

    Esta fun√ß√£o configura uma barra de progresso com:
    - Largura ampliada para 600px para acomodar debug messages
    - Altura ampliada para 450px para mostrar mais conte√∫do
    - Quebra autom√°tica de linha para textos longos
    - Alinhamento adequado do texto

    Args:
        total_decks: N√∫mero total de decks para calcular o m√°ximo da barra

    Returns:
        QProgressDialog: Dialog de progresso configurado
    """
    progress = QProgressDialog("Sincronizando decks...", "", 0, total_decks * 3, mw)
    progress.setWindowTitle("Sincroniza√ß√£o de Decks")
    progress.setMinimumDuration(0)
    progress.setValue(0)
    progress.setCancelButton(None)
    progress.setAutoClose(False)  # N√£o fechar automaticamente
    progress.setAutoReset(False)  # N√£o resetar automaticamente

    # Configurar tamanho normal (interface limpa sem debug messages)
    progress.setFixedWidth(500)  # Largura normal de 500 pixels
    progress.setFixedHeight(200)  # Altura reduzida para 200 pixels

    # Configurar o label para quebrar linha automaticamente
    label = progress.findChild(QLabel)
    if label:
        label.setWordWrap(True)  # Permitir quebra de linha
        label.setAlignment(AlignTop | AlignLeft)  # Alinhar ao topo e √† esquerda
        label.setMinimumSize(480, 180)  # Tamanho ajustado para interface limpa

    progress.show()
    mw.app.processEvents()  # For√ßa a exibi√ß√£o da barra
    return progress


def _update_progress_text(
    progress, status_msgs, max_lines=3, debug_messages=None, show_debug=False
):
    """
    Atualiza o texto da barra de progresso com formata√ß√£o adequada.

    Args:
        progress: QProgressDialog instance
        status_msgs: Lista de mensagens de status
        max_lines: N√∫mero m√°ximo de linhas a mostrar para status
        debug_messages: Lista de mensagens de debug (apenas armazenadas, n√£o exibidas por padr√£o)
        show_debug: Se True, mostra as mensagens de debug na interface (padr√£o: False)
    """
    all_text_lines = []

    # Adicionar mensagens de status recentes
    recent_msgs = (
        status_msgs[-max_lines:] if len(status_msgs) > max_lines else status_msgs
    )
    if recent_msgs:
        all_text_lines.extend(recent_msgs)

    # Adicionar mensagens de debug se fornecidas E se solicitado
    if debug_messages and show_debug:
        all_text_lines.append("")  # Linha em branco para separar
        all_text_lines.append("=== DEBUG MESSAGES ===")

        # Mostrar as √∫ltimas mensagens de debug (m√°ximo 15 para janela ampliada)
        recent_debug = (
            debug_messages[-15:] if len(debug_messages) > 15 else debug_messages
        )
        all_text_lines.extend(recent_debug)

        if len(debug_messages) > 15:
            all_text_lines.append(
                f"... e mais {len(debug_messages) - 15} mensagens de debug"
            )

    # Juntar todas as linhas
    text = "\n".join(all_text_lines)

    # Limitar o comprimento de cada linha para evitar texto muito longo
    lines = text.split("\n")
    formatted_lines = []

    for line in lines:
        # Se a linha for muito longa, quebrar em palavras
        if len(line) > 80:  # Aumentar para 80 caracteres para debug messages
            words = line.split(" ")
            current_line = ""

            for word in words:
                if len(current_line) + len(word) + 1 <= 80:
                    if current_line:
                        current_line += " " + word
                    else:
                        current_line = word
                else:
                    if current_line:
                        formatted_lines.append(current_line)
                    current_line = word

            if current_line:
                formatted_lines.append(current_line)
        else:
            formatted_lines.append(line)

    # Atualizar o texto na barra de progresso
    final_text = "\n".join(formatted_lines)
    progress.setLabelText(final_text)

    # For√ßar atualiza√ß√£o da interface
    mw.app.processEvents()


def _sync_single_deck(
    remote_decks, deckKey, progress, status_msgs, step, debug_messages=None
):
    """
    Sincroniza um √∫nico deck.

    Args:
        remote_decks: Dicion√°rio de decks remotos
        deckKey: Chave do deck para sincronizar
        progress: Dialog de progresso
        status_msgs: Lista de mensagens de status
        step: Passo atual do progresso

    Returns:
        tuple: (step, deck_sync_increment, current_stats)
    """
    from .deck_manager import DeckNameManager
    from .deck_manager import DeckRecreationManager

    # In√≠cio da l√≥gica de sincroniza√ß√£o
    add_debug_message(f"üöÄ INICIANDO sincroniza√ß√£o para deck hash: {deckKey}", "SYNC")

    # Verificar se mw.col e mw.col.decks est√£o dispon√≠veis
    if not _is_anki_decks_ready():
        raise SyncError("Anki n√£o est√° pronto. Tente novamente em alguns instantes.")

    assert mw.col is not None  # Type hint para o checker

    currentRemoteInfo = remote_decks[deckKey]
    local_deck_id = currentRemoteInfo["local_deck_id"]
    remote_deck_url = currentRemoteInfo["remote_deck_url"]
    add_debug_message(f"üìã Local Deck ID: {local_deck_id}", "SYNC")
    add_debug_message(f"üîó Remote URL: {remote_deck_url}", "SYNC")

    # Verificar se o deck existe ou precisa ser recriado
    was_recreated, current_deck_id, current_deck_name = (
        DeckRecreationManager.recreate_deck_if_missing(currentRemoteInfo)
    )

    if was_recreated and current_deck_id is not None and current_deck_name is not None:
        # Capturar o ID antigo antes da atualiza√ß√£o para log correto
        old_deck_id = local_deck_id

        # Atualizar informa√ß√µes na configura√ß√£o
        DeckRecreationManager.update_deck_info_after_recreation(
            currentRemoteInfo, current_deck_id, current_deck_name
        )

        # IMPORTANTE: Salvar imediatamente as mudan√ßas de local_deck_id ap√≥s recria√ß√£o
        # Isso garante que o novo ID seja persistido mesmo se houver erro posterior
        save_remote_decks(remote_decks)
        add_debug_message(
            f"[CONFIG_SAVE] local_deck_id atualizado e salvo ap√≥s recria√ß√£o: {old_deck_id} -> {current_deck_id}",
            "SYNC",
        )

        # Atualizar vari√°veis locais
        local_deck_id = current_deck_id

        # Informar sobre a recria√ß√£o
        msg = f"Deck recriado: '{current_deck_name}'"
        status_msgs.append(msg)
        _update_progress_text(progress, status_msgs)

        step += 1
        progress.setValue(step)
        mw.app.processEvents()

    # Obter o deck atual (pode ser o original ou o recriado)
    if local_deck_id is None:
        raise ValueError("ID do deck local √© None")

    # Garantir que o ID seja do tipo correto para o Anki
    from anki.decks import DeckId

    deck_id: DeckId = DeckId(local_deck_id)
    deck = mw.col.decks.get(deck_id)
    if not deck:
        raise ValueError(f"Falha ao obter deck: {deck_id}")

    deckName = deck["name"]
    add_debug_message(f"üìã Deck atual: '{deckName}' (ID: {deck_id})", "SYNC")

    # Atualizar informa√ß√µes na configura√ß√£o com o nome real usado
    currentRemoteInfo["local_deck_name"] = deckName

    # Validar URL antes de tentar sincronizar e obter URL TSV para download
    tsv_url = validate_url(remote_deck_url)

    # 1. Download
    msg = f"{deckName}: baixando arquivo..."
    status_msgs.append(msg)
    _update_progress_text(progress, status_msgs)

    # Obter lista de estudantes habilitados para este deck
    enabled_students = get_selected_students_for_deck(remote_deck_url)
    add_debug_message(
        f"üéì Estudantes habilitados para este deck: {list(enabled_students)}",
        "STUDENTS",
    )

    remoteDeck = getRemoteDeck(tsv_url, enabled_students=list(enabled_students))

    # NOVO: Debug para verificar notas carregadas
    notes_count = (
        len(remoteDeck.notes)
        if hasattr(remoteDeck, "notes") and remoteDeck.notes
        else 0
    )
    add_debug_message(
        f"üìä Notas carregadas do deck remoto: {notes_count}", "REMOTE_DECK"
    )

    step += 1
    progress.setValue(step)
    mw.app.processEvents()

    # Atualizar remote_deck_name com o nome extra√≠do da URL
    new_remote_name_from_url = DeckNameManager.extract_remote_name_from_url(
        remote_deck_url
    )
    stored_remote_name = currentRemoteInfo.get("remote_deck_name")

    # IMPORTANTE: L√≥gica aprimorada para resolver conflitos din√¢micamente
    # Verificar se o nome remoto mudou e reavaliar resolu√ß√£o de conflitos
    should_update = False
    if stored_remote_name != new_remote_name_from_url:
        # Verificar se o nome armazenado tem sufixo de conflito
        if stored_remote_name and " #conflito" in stored_remote_name:
            # Nome tem sufixo de conflito - verificar se ainda √© necess√°rio
            add_debug_message(
                f"[CONFLICT_REEVALUATE] Reavaliando conflito: '{stored_remote_name}' vs novo nome '{new_remote_name_from_url}'",
                "SYNC",
            )

            # Usar DeckNameManager centralizado para resolu√ß√£o de conflitos
            resolved_new_name = DeckNameManager.resolve_remote_name_conflict(
                remote_deck_url, new_remote_name_from_url
            )

            # Se o nome resolvido √© igual ao nome original, n√£o h√° mais conflito
            if resolved_new_name == new_remote_name_from_url:
                # Conflito foi resolvido - pode usar nome original
                should_update = True
                current_remote_name = new_remote_name_from_url
                add_debug_message(
                    f"[CONFLICT_RESOLVED] Conflito resolvido! '{stored_remote_name}' ‚Üí '{new_remote_name_from_url}'",
                    "SYNC",
                )

                # Tamb√©m atualizar local_deck_name para remover o sufixo
                old_local_name = currentRemoteInfo.get("local_deck_name", "")
                if old_local_name and " #conflito" in old_local_name:
                    # Remover sufixo do nome local tamb√©m
                    new_local_name = old_local_name.split(" #conflito")[0]
                    add_debug_message(
                        f"[CONFLICT_RESOLVED] Atualizando local_deck_name: '{old_local_name}' ‚Üí '{new_local_name}'",
                        "SYNC",
                    )

                    # Atualizar nome do deck no Anki
                    try:
                        deck_id = currentRemoteInfo.get("local_deck_id")
                        if deck_id and mw and mw.col:
                            from anki.decks import DeckId

                            deck = mw.col.decks.get(DeckId(deck_id))
                            if deck:
                                old_anki_name = deck.get("name", "")
                                deck["name"] = new_local_name
                                mw.col.decks.save(deck)
                                add_debug_message(
                                    f"[ANKI_UPDATE] Deck renomeado no Anki: '{old_anki_name}' ‚Üí '{new_local_name}'",
                                    "SYNC",
                                )
                    except Exception as e:
                        add_debug_message(
                            f"[ANKI_ERROR] Erro ao renomear deck no Anki: {e}", "SYNC"
                        )

                    # Atualizar na configura√ß√£o
                    currentRemoteInfo["local_deck_name"] = new_local_name
                    remote_decks[deckKey]["local_deck_name"] = new_local_name

            else:
                # Ainda h√° conflito, mas pode ter mudado o sufixo
                if resolved_new_name != stored_remote_name:
                    should_update = True
                    current_remote_name = resolved_new_name
                    add_debug_message(
                        f"[CONFLICT_UPDATE] Atualizando sufixo de conflito: '{stored_remote_name}' ‚Üí '{resolved_new_name}'",
                        "SYNC",
                    )
                else:
                    add_debug_message(
                        f"[CONFLICT_UNCHANGED] Mantendo resolu√ß√£o existente: '{stored_remote_name}'",
                        "SYNC",
                    )

        else:
            # Nome n√£o tem conflito, aplicar resolu√ß√£o normal com DeckNameManager
            resolved_remote_name = DeckNameManager.resolve_remote_name_conflict(
                remote_deck_url, new_remote_name_from_url
            )

            if resolved_remote_name != stored_remote_name:
                should_update = True
                current_remote_name = resolved_remote_name
                add_debug_message(
                    f"[CONFLICT_RESOLVE] Aplicando resolu√ß√£o: '{new_remote_name_from_url}' ‚Üí '{resolved_remote_name}'",
                    "SYNC",
                )

    else:
        # Nome n√£o mudou, n√£o precisa atualizar
        add_debug_message(
            f"[CONFLICT_SKIP] Nome remoto n√£o mudou, mantendo: '{stored_remote_name}'",
            "SYNC",
        )
        current_remote_name = stored_remote_name

    # ABORDAGEM ROBUSTA: Sempre recriar local_deck_name e verificar se mudou
    from .deck_manager import DeckNameManager

    # Recriar local_deck_name baseado no remote_deck_name atual
    expected_local_deck_name = DeckNameManager.generate_local_name(current_remote_name)
    current_local_deck_name = currentRemoteInfo.get("local_deck_name", "")

    add_debug_message("[DECK_NAME_CHECK] Verificando consist√™ncia de nomes:", "SYNC")
    add_debug_message(f"[DECK_NAME_CHECK] - Remote: '{current_remote_name}'", "SYNC")
    add_debug_message(
        f"[DECK_NAME_CHECK] - Local atual: '{current_local_deck_name}'", "SYNC"
    )
    add_debug_message(
        f"[DECK_NAME_CHECK] - Local esperado: '{expected_local_deck_name}'", "SYNC"
    )

    # Verificar se local_deck_name precisa ser atualizado
    local_name_needs_update = current_local_deck_name != expected_local_deck_name

    # Aplicar atualiza√ß√µes necess√°rias
    if should_update or local_name_needs_update:
            if should_update:
                add_debug_message("[UPDATE_REASON] remote_deck_name mudou", "SYNC")
            if local_name_needs_update:
                add_debug_message("[UPDATE_REASON] local_deck_name inconsistente", "SYNC")

            # Atualizar local_deck_name no meta.json
            if local_name_needs_update:
                DeckNameManager._update_name_in_config(
                    remote_deck_url, expected_local_deck_name
                )
                add_debug_message(
                    f"[LOCAL_NAME_UPDATE] local_deck_name atualizado: '{current_local_deck_name}' -> '{expected_local_deck_name}'",
                    "SYNC",
                )

            # Sincronizar nome f√≠sico no Anki se necess√°rio
            sync_result = DeckNameManager.sync_deck_with_config(remote_deck_url)
            if sync_result:
                add_debug_message(
                    f"[DECK_SYNC] Deck f√≠sico sincronizado: ID {sync_result[0]} -> '{sync_result[1]}'",
                    "SYNC",
                )

            # Atualizar configura√ß√£o se houve mudan√ßa no remote_deck_name
            if should_update:
                # IMPORTANTE: Atualizar nomes dos note types ANTES de mudar o remote_deck_name
                old_remote_name_config = currentRemoteInfo.get("remote_deck_name")
                if old_remote_name_config and old_remote_name_config != current_remote_name:
                    try:
                        from .utils import update_note_type_names_for_deck_rename
                        from .config_manager import get_deck_note_type_ids
                        
                        # Detectar o nome real presente nos note types
                        note_types_config = get_deck_note_type_ids(remote_deck_url)
                        actual_old_name = None
                        
                        if note_types_config:
                            # Procurar por padr√£o comum nos note types para extrair o nome real
                            for note_type_name in note_types_config.values():
                                # Formato: "Sheets2Anki - {remote_name} - {student} - {type}"
                                if " - " in note_type_name:
                                    parts = note_type_name.split(" - ")
                                    if len(parts) >= 4 and parts[0] == "Sheets2Anki":
                                        # Reconstruir o nome remoto (pode ter m√∫ltiplos h√≠fens)
                                        # Pegar tudo entre "Sheets2Anki - " e " - {student}"
                                        start_idx = note_type_name.find("Sheets2Anki - ") + len("Sheets2Anki - ")
                                        # Encontrar a √∫ltima ocorr√™ncia de " - " seguida de aluno
                                        last_dash_student = note_type_name.rfind(" - " + parts[-2] + " - " + parts[-1])
                                        if last_dash_student > start_idx:
                                            potential_name = note_type_name[start_idx:last_dash_student]
                                            actual_old_name = potential_name
                                            break
                        
                        # Se n√£o conseguiu detectar, usar o nome da configura√ß√£o
                        old_name_to_use = actual_old_name if actual_old_name else old_remote_name_config
                        
                        add_debug_message(
                            f"[NOTE_TYPE_DETECT] old_remote_name_config: '{old_remote_name_config}'",
                            "SYNC",
                        )
                        add_debug_message(
                            f"[NOTE_TYPE_DETECT] actual_old_name detectado: '{actual_old_name}'",
                            "SYNC",
                        )
                        add_debug_message(
                            f"[NOTE_TYPE_DETECT] usando para atualiza√ß√£o: '{old_name_to_use}' ‚Üí '{current_remote_name}'",
                            "SYNC",
                        )
                        
                        updated_count = update_note_type_names_for_deck_rename(
                            remote_deck_url, old_name_to_use, current_remote_name, debug_messages
                        )
                        add_debug_message(
                            f"[NOTE_TYPE_UPDATE] {updated_count} note types atualizados para novo remote_deck_name",
                            "SYNC",
                        )
                        
                        # Sincronizar os note types no Anki com os nomes atualizados
                        if updated_count > 0:
                            try:
                                from .utils import sync_note_type_names_with_config
                                sync_result = sync_note_type_names_with_config(mw.col, remote_deck_url, debug_messages)
                                if sync_result and sync_result.get("renamed_in_anki", 0) > 0:
                                    add_debug_message(
                                        f"[NOTE_TYPE_ANKI_SYNC] {sync_result['renamed_in_anki']} note types renomeados no Anki",
                                        "SYNC",
                                    )
                                else:
                                    add_debug_message(
                                        "[NOTE_TYPE_ANKI_SYNC] Nenhum note type renomeado no Anki",
                                        "SYNC",
                                    )
                            except Exception as anki_sync_error:
                                add_debug_message(
                                    f"[NOTE_TYPE_ANKI_ERROR] Erro ao sincronizar note types no Anki: {anki_sync_error}",
                                    "SYNC",
                                )
                    except Exception as note_type_error:
                        add_debug_message(
                            f"[NOTE_TYPE_ERROR] Erro ao atualizar note types: {note_type_error}",
                            "SYNC",
                        )
            
            currentRemoteInfo["remote_deck_name"] = current_remote_name
            remote_decks[deckKey]["remote_deck_name"] = current_remote_name
            add_debug_message(
                f"[REMOTE_NAME_UPDATE] remote_deck_name atualizado para: '{current_remote_name}'",
                "SYNC",
            )

            # Sempre atualizar local_deck_name na configura√ß√£o em mem√≥ria
            if local_name_needs_update:
                currentRemoteInfo["local_deck_name"] = expected_local_deck_name
                remote_decks[deckKey]["local_deck_name"] = expected_local_deck_name
                add_debug_message(
                    "[MEMORY_UPDATE] Configura√ß√£o em mem√≥ria atualizada", "SYNC"
                )

            # IMPORTANTE: N√£o recarregar do arquivo aqui para preservar atualiza√ß√µes em mem√≥ria
            add_debug_message(
                "[CONFIG_PRESERVE] Preservando atualiza√ß√µes em mem√≥ria (remote_deck_name e note_types)", "SYNC"
            )
            
            # Salvar configura√ß√£o final (agora com note_types atualizados E remote_deck_name correto)
            save_remote_decks(remote_decks)
            add_debug_message(
                "[CONFIG_SAVE] Configura√ß√£o salva ap√≥s atualiza√ß√£o de nomes (com note_types corretos)", "SYNC"
            )    # Atualizar nome do deck se necess√°rio usando DeckNameManager
    current_remote_name = currentRemoteInfo.get("remote_deck_name")
    sync_result = DeckNameManager.sync_deck_with_config(remote_deck_url)
    if sync_result:
        sync_deck_id, updated_name = sync_result
        if updated_name != deckName:
            # Atualizar informa√ß√µes do deck na configura√ß√£o
            currentRemoteInfo["local_deck_name"] = updated_name
            deckName = updated_name
            remoteDeck.deckName = updated_name

        msg = f"{deckName}: nome do deck atualizado automaticamente..."
        status_msgs.append(msg)
        _update_progress_text(progress, status_msgs)

    # 2. Processamento e escrita no banco de dados
    msg = f"{deckName}: processando dados..."
    status_msgs.append(msg)
    _update_progress_text(progress, status_msgs)

    remoteDeck.deckName = deckName

    msg = f"{deckName}: escrevendo no banco de dados..."
    status_msgs.append(msg)
    _update_progress_text(progress, status_msgs)

    add_debug_message(
        f"üöÄ ABOUT TO CALL create_or_update_notes - remoteDeck has {len(remoteDeck.notes) if hasattr(remoteDeck, 'notes') and remoteDeck.notes else 0} notes",
        "SYNC",
    )

    # Debug cr√≠tico para verificar importa√ß√£o
    add_debug_message(
        f"üîß create_or_update_notes function: {create_or_update_notes}", "SYNC"
    )
    add_debug_message(
        f"üîß mw.col: {mw.col}, remoteDeck: {remoteDeck}, local_deck_id: {local_deck_id}",
        "SYNC",
    )

    try:
        add_debug_message("üîß CALLING create_or_update_notes NOW...", "SYNC")
        deck_stats = create_or_update_notes(
            mw.col,
            remoteDeck,
            local_deck_id,
            deck_url=remote_deck_url,
            debug_messages=debug_messages,
        )
        add_debug_message(f"üîß create_or_update_notes RETURNED: {deck_stats}", "SYNC")
    except Exception as e:
        error_details = traceback.format_exc()
        add_debug_message(f"‚ùå ERRO na chamada create_or_update_notes: {e}", "SYNC")
        add_debug_message(f"‚ùå Stack trace: {error_details}", "SYNC")
        # Retornar stats padr√£o com erros
        deck_stats = SyncStats(created=0, updated=0, deleted=0, errors=1, ignored=0)
        deck_stats.add_error(f"Erro cr√≠tico na sincroniza√ß√£o: {e}")

    add_debug_message(
        f"‚úÖ create_or_update_notes COMPLETED - returned: {deck_stats}", "SYNC"
    )

    step += 1
    progress.setValue(step)
    mw.app.processEvents()

    # 4. Capturar e armazenar IDs dos note types ap√≥s sincroniza√ß√£o bem-sucedida
    try:

        add_debug_message(
            f"Iniciando captura de note type IDs para deck: {deckName}", "SYNC"
        )

        # Capturar IDs dos note types criados/atualizados
        capture_deck_note_type_ids(
            remote_deck_url,  # Usar a URL real em vez da hash key
            currentRemoteInfo.get("remote_deck_name", "RemoteDeck"),
            None,  # enabled_students n√£o √© necess√°rio para a captura de IDs
            None,  # enabled_students n√£o √© necess√°rio para a captura de IDs
        )

        add_debug_message(
            f"‚úÖ IDs de note types capturados e armazenados para deck: {deckName}",
            "SYNC",
        )

        # NOVO: Garantir consist√™ncia autom√°tica de nomes ap√≥s sincroniza√ß√£o
        add_debug_message(
            f"üîß Iniciando verifica√ß√£o de consist√™ncia de nomes para: {remote_deck_url}",
            "NAME_CONSISTENCY",
        )
        
        try:
            consistency_result = NameConsistencyManager.ensure_consistency_during_sync(
                deck_url=remote_deck_url,
                remote_decks=remote_decks,
                debug_callback=lambda msg: add_debug_message(msg, "NAME_CONSISTENCY")
            )
            
            if consistency_result and not consistency_result.get('errors'):
                # Sucesso - logar o que foi atualizado
                updates = []
                if consistency_result.get('deck_updated'):
                    updates.append("deck name")
                if consistency_result.get('note_types_updated'):
                    updates.append(f"{len(consistency_result['note_types_updated'])} note types")
                if consistency_result.get('deck_options_updated'):
                    updates.append("deck options")
                
                if updates:
                    add_debug_message(
                        f"‚úÖ Consist√™ncia aplicada: {', '.join(updates)} atualizados",
                        "NAME_CONSISTENCY",
                    )
                else:
                    add_debug_message(
                        "‚úÖ Consist√™ncia verificada: todos os nomes j√° estavam corretos",
                        "NAME_CONSISTENCY",
                    )
            elif consistency_result and consistency_result.get('errors'):
                # Erro - mas n√£o falhar a sincroniza√ß√£o
                for error in consistency_result['errors']:
                    add_debug_message(
                        f"‚ö†Ô∏è Erro na consist√™ncia de nomes: {error}",
                        "NAME_CONSISTENCY",
                    )
        except Exception as consistency_error:
            # N√£o falhar a sincroniza√ß√£o por causa da consist√™ncia de nomes
            add_debug_message(
                f"‚ö†Ô∏è Erro inesperado na consist√™ncia de nomes: {consistency_error}",
                "NAME_CONSISTENCY",
            )

    except Exception as e:
        # N√£o falhar a sincroniza√ß√£o por causa da captura de IDs
        add_debug_message(
            f"‚ùå ERRO na captura de note type IDs para {deckName}: {e}", "SYNC"
        )
        error_details = traceback.format_exc()
        add_debug_message(f"Detalhes do erro: {error_details}", "SYNC")

    # 5. SINCRONIZA√á√ÉO ROBUSTA DOS NOTE_TYPES ap√≥s cria√ß√£o das notas no Anki
    add_debug_message(
        "[NOTE_TYPE_SYNC] Iniciando sincroniza√ß√£o robusta dos note_types AP√ìS cria√ß√£o das notas...",
        "SYNC",
    )
    try:
        enabled_students = get_selected_students_for_deck(remote_deck_url)
        sync_result = sync_note_type_names_robustly(
            remote_deck_url, current_remote_name, enabled_students
        )

        if sync_result["updated_count"] > 0:
            add_debug_message(
                f"[NOTE_TYPE_SYNC] ‚úÖ {sync_result['updated_count']} note_types sincronizados com sucesso",
                "SYNC",
            )
            add_debug_message(
                f"[NOTE_TYPE_SYNC] - Renomeados no Anki: {sync_result['renamed_in_anki']}",
                "SYNC",
            )
            add_debug_message(
                f"[NOTE_TYPE_SYNC] - Atualizados no meta.json: {sync_result['updated_in_meta']}",
                "SYNC",
            )
            if sync_result.get("notes_migrated", 0) > 0:
                add_debug_message(
                    f"[NOTE_TYPE_SYNC] - Notas migradas: {sync_result['notes_migrated']}",
                    "SYNC",
                )
        else:
            add_debug_message(
                "[NOTE_TYPE_SYNC] ‚úÖ Todos os note_types j√° est√£o consistentes", "SYNC"
            )

    except Exception as e:
        add_debug_message(
            f"[NOTE_TYPE_SYNC] ‚ùå Erro na sincroniza√ß√£o robusta: {e}", "SYNC"
        )
        # Tentar fallback com m√©todo antigo
        try:
            enabled_students = get_selected_students_for_deck(remote_deck_url)
            update_note_type_names_in_meta(
                remote_deck_url, current_remote_name, enabled_students
            )
            add_debug_message("[NOTE_TYPE_SYNC] Fallback aplicado com sucesso", "SYNC")
        except Exception as fallback_error:
            add_debug_message(
                f"[NOTE_TYPE_SYNC] ‚ùå Fallback tamb√©m falhou: {fallback_error}", "SYNC"
            )

    # NOVO: Atualizar hist√≥rico de sincroniza√ß√£o de alunos (SOLU√á√ÉO ROBUSTA)
    # Isso garante que sempre saibamos quais alunos foram sincronizados,
    # independentemente de renomea√ß√µes manuais de note types
    try:
        from .config_manager import update_student_sync_history
        
        # Obter alunos que foram sincronizados neste deck
        students_synced = get_selected_students_for_deck(remote_deck_url)
        
        if students_synced:
            # Atualizar hist√≥rico persistente
            update_student_sync_history(students_synced)
            add_debug_message(
                f"üìö HISTORY: Hist√≥rico atualizado para {len(students_synced)} alunos",
                "SYNC"
            )
        else:
            add_debug_message("üìö HISTORY: Nenhum aluno sincronizado para atualizar hist√≥rico", "SYNC")
            
    except Exception as history_error:
        add_debug_message(f"‚ö†Ô∏è HISTORY: Erro ao atualizar hist√≥rico: {history_error}", "SYNC")
        # N√£o interromper sincroniza√ß√£o por erro no hist√≥rico

    # CR√çTICO: Salvar configura√ß√µes finais ap√≥s consist√™ncia de nomes
    # Isso garante que as atualiza√ß√µes do NameConsistencyManager sejam persistidas
    try:
        from .config_manager import save_meta, get_meta
        current_meta = get_meta()
        save_meta(current_meta)
        add_debug_message(
            "üíæ FINAL_SAVE: Configura√ß√µes salvas ap√≥s verifica√ß√£o de consist√™ncia",
            "SYNC"
        )
    except Exception as save_error:
        add_debug_message(
            f"‚ö†Ô∏è FINAL_SAVE: Erro ao salvar configura√ß√µes finais: {save_error}",
            "SYNC"
        )

    return step, 1, deck_stats


def _handle_sync_error(
    e, deckKey, remote_decks, progress, status_msgs, sync_errors, step
):
    """Trata erros de sincroniza√ß√£o de deck."""
    # Verificar se mw.col e mw.col.decks est√£o dispon√≠veis
    if not _is_anki_decks_ready():
        deckName = "Unknown"
    else:
        assert mw.col is not None  # Type hint para o checker
        # Tentar obter o nome do deck para a mensagem de erro
        try:
            deck_info = remote_decks[deckKey]
            local_deck_id = deck_info["local_deck_id"]
            deck = (
                mw.col.decks.get(local_deck_id) if local_deck_id is not None else None
            )
            deckName = (
                deck["name"]
                if deck
                else (
                    deck_info.get("local_deck_name") or str(local_deck_id)
                    if local_deck_id is not None
                    else "Unknown"
                )
            )
        except:
            deckName = "Unknown"

    error_msg = f"Failed to sync deck '{deckName}': {str(e)}"
    sync_errors.append(error_msg)
    status_msgs.append(error_msg)
    _update_progress_text(progress, status_msgs)
    step += 3
    progress.setValue(step)
    mw.app.processEvents()
    return step, sync_errors


def _handle_unexpected_error(
    e, deckKey, remote_decks, progress, status_msgs, sync_errors, step
):
    """Trata erros inesperados durante sincroniza√ß√£o."""
    # Verificar se mw.col e mw.col.decks est√£o dispon√≠veis
    if not _is_anki_decks_ready():
        deckName = "Unknown"
    else:
        assert mw.col is not None  # Type hint para o checker
        # Tentar obter o nome do deck para a mensagem de erro
        try:
            deck_info = remote_decks[deckKey]
            local_deck_id = deck_info["local_deck_id"]
            deck = (
                mw.col.decks.get(local_deck_id) if local_deck_id is not None else None
            )
            deckName = (
                deck["name"]
                if deck
                else (
                    get_deck_local_name(deckKey) or str(local_deck_id)
                    if local_deck_id is not None
                    else "Unknown"
                )
            )
        except:
            deckName = "Unknown"

    error_msg = f"Unexpected error syncing deck '{deckName}': {str(e)}"
    sync_errors.append(error_msg)
    status_msgs.append(error_msg)
    _update_progress_text(progress, status_msgs)
    step += 3
    progress.setValue(step)
    mw.app.processEvents()
    return step, sync_errors


def _show_debug_messages_window(debug_messages):
    """
    Mostra uma janela scrollable com todas as mensagens de debug.
    Adaptada para dark mode e light mode do Anki.

    Args:
        debug_messages: Lista de mensagens de debug para exibir
    """
    from aqt.qt import QDialog
    from aqt.qt import QLabel
    from aqt.qt import QPushButton
    from aqt.qt import QTextEdit
    from aqt.qt import QVBoxLayout

    dialog = QDialog(mw)
    dialog.setWindowTitle(
        f"Debug Messages - Sistema de Note Type IDs ({len(debug_messages)} mensagens)"
    )
    dialog.setFixedSize(800, 600)

    layout = QVBoxLayout(dialog)

    # Detectar dark mode usando m√©todo mais direto
    is_dark_mode = False
    if hasattr(mw, "pm") and hasattr(mw.pm, "night_mode"):
        is_dark_mode = mw.pm.night_mode()

    # Definir cores baseadas no tema
    if is_dark_mode:
        # Dark mode colors - cores com alto contraste
        bg_color = "#1e1e1e"  # Fundo muito escuro
        text_color = "#f0f0f0"  # Texto muito claro
        border_color = "#555555"  # Borda m√©dia
        info_bg_color = "#2d2d2d"  # Fundo do info um pouco mais claro
        scroll_bg = "#3d3d3d"  # Fundo da scrollbar
        scroll_handle = "#707070"  # Handle da scrollbar
        scroll_hover = "#909090"  # Handle hover
        button_bg = "#4a4a4a"  # Fundo do bot√£o
        button_hover = "#5a5a5a"  # Hover do bot√£o
    else:
        # Light mode colors - cores tradicionais
        bg_color = "#ffffff"
        text_color = "#000000"
        border_color = "#cccccc"
        info_bg_color = "#f8f8f8"
        scroll_bg = "#f0f0f0"
        scroll_handle = "#c0c0c0"
        scroll_hover = "#a0a0a0"
        button_bg = "#f0f0f0"
        button_hover = "#e0e0e0"

    # Adicionar label informativo
    info_label = QLabel(
        f"üìã Total de {len(debug_messages)} mensagens de debug capturadas durante a sincroniza√ß√£o:"
    )
    info_label.setStyleSheet(
        f"""
        QLabel {{
            font-weight: bold; 
            margin-bottom: 5px;
            color: {text_color};
            background-color: {info_bg_color};
            padding: 8px;
            border-radius: 4px;
            border: 1px solid {border_color};
        }}
    """
    )
    layout.addWidget(info_label)

    # Criar √°rea de texto scrollable com cores de alto contraste
    text_area = QTextEdit()
    text_area.setReadOnly(True)
    text_area.setPlainText("\n".join(debug_messages))
    text_area.setStyleSheet(
        f"""
        QTextEdit {{
            font-family: 'Courier New', 'Monaco', 'Consolas', 'Liberation Mono', monospace;
            font-size: 10pt;
            background-color: {bg_color};
            color: {text_color};
            border: 2px solid {border_color};
            line-height: 1.4;
            padding: 10px;
            selection-background-color: {"#4a4a4a" if is_dark_mode else "#3390ff"};
            selection-color: {text_color};
        }}
        QScrollBar:vertical {{
            background-color: {scroll_bg};
            width: 14px;
            border: 1px solid {border_color};
        }}
        QScrollBar::handle:vertical {{
            background-color: {scroll_handle};
            border-radius: 6px;
            margin: 2px;
        }}
        QScrollBar::handle:vertical:hover {{
            background-color: {scroll_hover};
        }}
        QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{
            background: none;
            border: none;
        }}
    """
    )

    layout.addWidget(text_area)

    # Bot√£o para fechar com estilo apropriado
    close_button = QPushButton("Fechar")
    close_button.clicked.connect(dialog.accept)
    close_button.setDefault(True)
    close_button.setStyleSheet(
        f"""
        QPushButton {{
            background-color: {button_bg};
            color: {text_color};
            border: 1px solid {border_color};
            padding: 10px 20px;
            border-radius: 6px;
            font-weight: bold;
            min-width: 80px;
        }}
        QPushButton:hover {{
            background-color: {button_hover};
        }}
        QPushButton:pressed {{
            background-color: {border_color};
        }}
    """
    )
    layout.addWidget(close_button)

    # Aplicar estilo geral ao dialog
    dialog.setStyleSheet(
        f"""
        QDialog {{
            background-color: {info_bg_color};
            color: {text_color};
        }}
    """
    )

    from .compat import safe_exec_dialog

    safe_exec_dialog(dialog)


def _handle_consolidated_cleanup(remote_decks):
    """
    Gerencia limpezas de dados de forma consolidada para evitar m√∫ltiplas confirma√ß√µes.

    Esta fun√ß√£o verifica se h√° necessidade de limpeza de:
    1. Alunos desabilitados
    2. Notas [MISSING A.] (quando funcionalidade foi desabilitada)

    Se ambos precisam de limpeza, mostra uma √∫nica confirma√ß√£o consolidada.
    Se apenas um precisa, usa a confirma√ß√£o espec√≠fica.

    Args:
        remote_decks (dict): Dicion√°rio de decks remotos configurados

    Returns:
        tuple: (missing_cleanup_result, cleanup_result)
    """
    # Verificar se precisa de limpeza [MISSING A.]
    needs_missing_cleanup = _needs_missing_students_cleanup(remote_decks)

    # Verificar se precisa de limpeza de alunos desabilitados
    needs_disabled_cleanup = _needs_disabled_students_cleanup(remote_decks)

    if not needs_missing_cleanup and not needs_disabled_cleanup:
        # Nenhuma limpeza necess√°ria
        return None, None

    if needs_missing_cleanup and needs_disabled_cleanup:
        # Ambas as limpezas s√£o necess√°rias - mostrar confirma√ß√£o consolidada
        return _handle_consolidated_confirmation_cleanup(remote_decks)

    elif needs_missing_cleanup:
        # Apenas limpeza [MISSING A.]
        missing_result = _handle_missing_students_cleanup(remote_decks)
        return missing_result, None

    else:
        # Apenas limpeza de alunos desabilitados
        cleanup_result = _handle_disabled_students_cleanup(remote_decks)
        return None, cleanup_result


def _needs_missing_students_cleanup(remote_decks):
    """
    Verifica se √© necess√°rio fazer limpeza de dados [MISSING A.] sem mostrar di√°logos.

    Returns:
        bool: True se limpeza √© necess√°ria
    """
    from .config_manager import is_auto_remove_disabled_students
    from .config_manager import is_sync_missing_students_notes

    # PRIMEIRA VERIFICA√á√ÉO: Se funcionalidade est√° ativada, n√£o precisa limpar
    if is_sync_missing_students_notes():
        print("üîç [MISSING A.]: Funcionalidade ATIVADA, nenhuma limpeza necess√°ria")
        return False  # Funcionalidade ativada, n√£o precisa limpar

    # SEGUNDA VERIFICA√á√ÉO: Se remo√ß√£o autom√°tica est√° desabilitada, n√£o limpar
    if not is_auto_remove_disabled_students():
        print(
            "üîç [MISSING A.]: Funcionalidade DESATIVADA, mas remo√ß√£o autom√°tica tamb√©m DESABILITADA - n√£o limpar"
        )
        return False

    print(
        "üîç [MISSING A.]: Funcionalidade DESATIVADA e remo√ß√£o autom√°tica ATIVADA, verificando se h√° dados para limpar..."
    )

    # Verificar se h√° dados [MISSING A.] para limpar
    deck_names = [
        deck_info.get("remote_deck_name", "") for deck_info in remote_decks.values()
    ]
    deck_names = [name for name in deck_names if name]

    if not deck_names or not _is_anki_ready():
        print("üîç [MISSING A.]: Sem decks ou sem conex√£o com Anki")
        return False

    assert mw.col is not None  # Type hint para o checker
    col = mw.col
    has_missing_data = False

    for deck_name in deck_names:
        print(f"üîç [MISSING A.]: Verificando deck '{deck_name}'...")

        # Verificar se h√° decks [MISSING A.]
        missing_deck_pattern = f"{deck_name}::[MISSING A.]::"
        all_decks = col.decks.all_names_and_ids()

        missing_decks_found = [
            deck.name
            for deck in all_decks
            if deck.name.startswith(missing_deck_pattern)
        ]
        if missing_decks_found:
            has_missing_data = True
            print(f"  üìÅ Encontrados {len(missing_decks_found)} decks [MISSING A.]")

        # Verificar se h√° note types [MISSING A.]
        all_models = col.models.all()
        missing_pattern = f"Sheets2Anki - {deck_name} - [MISSING A.] -"

        missing_models_found = [
            model["name"] for model in all_models if missing_pattern in model["name"]
        ]
        if missing_models_found:
            has_missing_data = True
            print(
                f"  üè∑Ô∏è Encontrados {len(missing_models_found)} note types [MISSING A.]"
            )

        if has_missing_data:
            break  # J√° encontrou dados, n√£o precisa continuar

    if has_missing_data:
        print("‚ö†Ô∏è [MISSING A.]: Dados encontrados, limpeza necess√°ria")
    else:
        print("‚úÖ [MISSING A.]: Nenhum dado encontrado, limpeza desnecess√°ria")

    return has_missing_data


def _needs_disabled_students_cleanup(remote_decks):
    """
    Verifica se √© necess√°rio fazer limpeza de alunos desabilitados.

    NOVA VERS√ÉO: Usa normaliza√ß√£o consistente de nomes.

    ROBUSTEZ: Usa m√∫ltiplas fontes para detectar alunos anteriormente habilitados:
    1. Note types existentes no Anki
    2. Configura√ß√£o global de estudantes dispon√≠veis
    3. Dados dos decks remotos

    Returns:
        bool: True se limpeza √© necess√°ria
    """
    from .config_manager import get_global_student_config
    from .config_manager import is_auto_remove_disabled_students

    # PRIMEIRA VERIFICA√á√ÉO: Auto-remo√ß√£o deve estar ativa
    if not is_auto_remove_disabled_students():
        return False

    config = get_global_student_config()
    current_enabled_raw = config.get("enabled_students", [])

    # Estudantes atualmente habilitados (case-sensitive)
    current_enabled_set = {
        student for student in current_enabled_raw if student and student.strip()
    }

    # M√öLTIPLAS FONTES para detectar alunos anteriormente habilitados (ROBUSTEZ)
    previous_enabled_raw = set()

    # Fonte 1: Todos os estudantes dispon√≠veis
    available_students = config.get("available_students", [])
    previous_enabled_raw.update(available_students)

    # Fonte 3: Verificar se h√° decks/notas de alunos no Anki (scan direto)
    if mw and hasattr(mw, "col") and mw.col:
        anki_students = _get_students_from_anki_data()
        previous_enabled_raw.update(anki_students)

    # Processar previous_enabled (case-sensitive)
    previous_enabled_set = {
        student for student in previous_enabled_raw if student and student.strip()
    }

    # CALCULAR alunos desabilitados (case-sensitive)
    disabled_students_set = previous_enabled_set - current_enabled_set

    if disabled_students_set:
        print("üîç CLEANUP: Detectados alunos para limpeza:")
        print(f"  ‚Ä¢ Atualmente habilitados: {sorted(current_enabled_raw)}")
        print(f"  ‚Ä¢ Anteriormente habilitados: {sorted(previous_enabled_set)}")
        print(f"  ‚Ä¢ Alunos a remover: {sorted(disabled_students_set)}")

    return bool(disabled_students_set)


def _get_students_from_anki_data():
    """
    NOVA FUN√á√ÉO: Escaneia dados do Anki para encontrar estudantes com dados existentes.
    Agora usa normaliza√ß√£o consistente de nomes.

    Returns:
        set: Conjunto de alunos encontrados no Anki (nomes normalizados)
    """
    students_found = set()

    if not _is_anki_ready():
        return students_found

    assert mw.col is not None  # Type hint para o checker
    col = mw.col

    try:
        # Escanear decks por padr√µes de alunos "Sheets2Anki::DeckRemoto::StudentName::"
        all_decks = col.decks.all_names_and_ids()
        for deck in all_decks:
            deck_parts = deck.name.split("::")
            if len(deck_parts) >= 3 and "Sheets2Anki" in deck_parts[0]:
                # Estrutura: ["Sheets2Anki", "DeckRemoto", "StudentName", ...]
                potential_student = deck_parts[2].strip()  # Terceira posi√ß√£o √© o aluno
                if potential_student and potential_student != "[MISSING A.]":
                    students_found.add(potential_student)

        # Escanear note types buscando nomes de estudantes
        all_models = col.models.all()
        for model in all_models:
            model_name = model["name"]
            if "Sheets2Anki -" in model_name:
                # Extrair nome do estudante do formato: "Sheets2Anki - Deck - StudentName - Type"
                parts = model_name.split(" - ")
                if len(parts) >= 4:
                    student_name = parts[2].strip()  # Third part is student name
                    if student_name:
                        students_found.add(student_name)

        print(
            f"üîç SCAN: Encontrados estudantes com dados no Anki: {sorted(students_found)}"
        )

    except Exception as e:
        print(f"‚ö†Ô∏è SCAN: Erro ao escanear dados do Anki: {e}")

    return students_found


def _handle_consolidated_confirmation_cleanup(remote_decks):
    """
    Mostra uma √∫nica confirma√ß√£o para ambos os tipos de limpeza e executa ambos se confirmado.
    NOVA VERS√ÉO: Usa normaliza√ß√£o consistente de nomes.

    Returns:
        tuple: (missing_cleanup_result, cleanup_result)
    """
    from .config_manager import get_global_student_config
    from .student_manager import cleanup_disabled_students_data
    from .student_manager import cleanup_missing_students_data

    # OBTER ALUNOS DESABILITADOS usando normaliza√ß√£o consistente
    config = get_global_student_config()
    current_enabled_raw = config.get("enabled_students", [])
    available_students = config.get("available_students", [])

    # Estudantes atualmente habilitados (case-sensitive)
    current_enabled_set = {
        student for student in current_enabled_raw if student and student.strip()
    }

    # M√öLTIPLAS FONTES para detectar alunos anteriormente habilitados
    previous_enabled_raw = set()
    previous_enabled_raw.update(available_students)

    # Adicionar dados do Anki
    if mw and hasattr(mw, "col") and mw.col:
        anki_students = _get_students_from_anki_data()
        previous_enabled_raw.update(anki_students)

    # Processar previous_enabled (case-sensitive)
    previous_enabled_set = {
        student for student in previous_enabled_raw if student and student.strip()
    }

    # CALCULAR desabilitados (case-sensitive)
    disabled_students_set = previous_enabled_set - current_enabled_set

    deck_names = [
        deck_info.get("remote_deck_name", "") for deck_info in remote_decks.values()
    ]
    deck_names = [name for name in deck_names if name]

    # Criar mensagem consolidada mais clara
    message_parts = [
        "‚ö†Ô∏è ATEN√á√ÉO: REMO√á√ÉO PERMANENTE DE DADOS ‚ö†Ô∏è\n",
        "O sistema detectou dados que precisam ser removidos.\n",
    ]

    # S√≥ mostrar se√ß√£o de alunos desabilitados se houver alunos
    if disabled_students_set:
        students_list = "\n".join(
            [f"‚Ä¢ {student}" for student in sorted(disabled_students_set)]
        )
        message_parts.extend(
            [
                "\nüìö ALUNOS DESABILITADOS:\n",
                "Os seguintes alunos foram removidos da sincroniza√ß√£o:\n",
                f"{students_list}\n",
                "\nüóëÔ∏è SER√Å REMOVIDO DE CADA ALUNO:\n",
                "‚Ä¢ Todas as notas individuais do aluno\n",
                "‚Ä¢ Todos os cards do aluno\n",
                "‚Ä¢ Todos os subdecks do aluno\n",
                "‚Ä¢ Note types espec√≠ficos do aluno\n",
            ]
        )

    # Verificar se [MISSING A.] deve ser limpo
    from .config_manager import is_sync_missing_students_notes

    if not is_sync_missing_students_notes():
        # [MISSING A.] foi desabilitado
        message_parts.extend(
            [
                "\nüìù FUNCIONALIDADE [MISSING A.] DESABILITADA:\n",
                "‚Ä¢ Todas as notas sem alunos espec√≠ficos ser√£o removidas\n",
                "‚Ä¢ Todos os subdecks [MISSING A.] ser√£o removidos\n",
                "‚Ä¢ Note types [MISSING A.] ser√£o removidos\n",
            ]
        )

    message_parts.extend(
        [
            "\n‚ùå ESTA A√á√ÉO √â IRREVERS√çVEL!\n",
            "Os dados removidos n√£o podem ser recuperados.\n\n",
            "Deseja continuar com a remo√ß√£o?",
        ]
    )

    message = "".join(message_parts)

    # Criar MessageBox consolidado
    msg_box = QMessageBox()
    msg_box.setIcon(QMessageBox.Icon.Warning)
    msg_box.setWindowTitle("‚ö†Ô∏è Confirmar Limpeza de Dados")
    msg_box.setText(message)
    msg_box.setStandardButtons(MessageBox_Yes | MessageBox_No)
    msg_box.setDefaultButton(MessageBox_No)  # Default √© NOT remover

    # Customizar bot√µes
    yes_btn = msg_box.button(MessageBox_Yes)
    no_btn = msg_box.button(MessageBox_No)

    if yes_btn:
        yes_btn.setText("üóëÔ∏è SIM, DELETAR TODOS OS DADOS")
        yes_btn.setStyleSheet(
            "QPushButton { background-color: #d73027; color: white; font-weight: bold; }"
        )

    if no_btn:
        no_btn.setText("üõ°Ô∏è N√ÉO, MANTER DADOS")
        no_btn.setStyleSheet(
            "QPushButton { background-color: #4575b4; color: white; font-weight: bold; }"
        )

    # Executar di√°logo
    from .compat import safe_exec_dialog

    result = safe_exec_dialog(msg_box)
    confirmed = result == MessageBox_Yes

    if confirmed:
        print("üßπ CLEANUP: Usu√°rio confirmou limpeza consolidada")
        print(f"üßπ CLEANUP: Alunos desabilitados: {sorted(disabled_students_set)}")

        # Executar ambas as limpezas
        cleanup_missing_students_data(deck_names)
        cleanup_disabled_students_data(disabled_students_set, deck_names)

        # Retornar resultados
        missing_result = {
            "missing_cleanup_count": 1,
            "missing_cleanup_message": "Dados [MISSING A.] removidos",
        }

        cleanup_result = {
            "disabled_students_count": len(disabled_students_set),
            "disabled_students_names": ", ".join(sorted(disabled_students_set)),
        }

        print("‚úÖ CLEANUP: Limpeza consolidada conclu√≠da")
        return missing_result, cleanup_result
    else:
        print("üõ°Ô∏è CLEANUP: Usu√°rio cancelou limpeza consolidada, dados preservados")
        return None, None


def _handle_missing_students_cleanup(remote_decks):
    """
    Gerencia a limpeza de dados de notas [MISSING A.] quando a funcionalidade for desativada.

    Esta fun√ß√£o:
    1. Verifica se a sincroniza√ß√£o de notas sem alunos foi desativada
    2. Mostra confirma√ß√£o de seguran√ßa
    3. Remove dados [MISSING A.] se confirmado

    Args:
        remote_decks (dict): Dicion√°rio de decks remotos configurados

    Returns:
        dict: Estat√≠sticas de limpeza ou None se n√£o houve limpeza
    """
    from .config_manager import is_sync_missing_students_notes
    from .student_manager import cleanup_missing_students_data
    from .student_manager import show_missing_cleanup_confirmation_dialog

    # Se a funcionalidade est√° ativada, n√£o fazer nada
    if is_sync_missing_students_notes():
        return None  # Funcionalidade ativada, nada a limpar

    # Funcionalidade desativada - verificar se h√° dados [MISSING A.] para remover
    print(
        "üîç CLEANUP: Sync [MISSING A.] est√° DESATIVADA, verificando dados para limpeza..."
    )

    # Verificar se existem decks ou note types [MISSING A.]
    if not _is_anki_ready():
        return None

    assert mw.col is not None  # Type hint para o checker
    col = mw.col
    deck_names = [
        deck_info.get("remote_deck_name", "") for deck_info in remote_decks.values()
    ]
    deck_names = [name for name in deck_names if name]  # Filtrar nomes vazios

    # Verificar se h√° dados [MISSING A.] existentes
    has_missing_data = False

    try:
        for deck_name in deck_names:
            # Verificar se h√° decks [MISSING A.]
            missing_deck_pattern = f"{deck_name}::[MISSING A.]::"
            all_decks = col.decks.all()
            for deck in all_decks:
                if deck.get("name", "").startswith(missing_deck_pattern):
                    has_missing_data = True
                    break

            if has_missing_data:
                break

            # Verificar se h√° note types [MISSING A.]
            note_types = col.models.all()
            for note_type in note_types:
                note_type_name = note_type.get("name", "")
                missing_pattern = f"Sheets2Anki - {deck_name} - [MISSING A.] -"
                if note_type_name.startswith(missing_pattern):
                    has_missing_data = True
                    break

            if has_missing_data:
                break

    except Exception as e:
        print(f"‚ùå CLEANUP: Erro ao verificar dados [MISSING A.]: {e}")
        return None

    if not has_missing_data:
        print("‚úÖ CLEANUP: Nenhum dado [MISSING A.] encontrado para limpeza")
        return None

    print("‚ö†Ô∏è CLEANUP: Encontrados dados [MISSING A.] para limpeza")

    # Mostrar di√°logo de confirma√ß√£o
    if show_missing_cleanup_confirmation_dialog():
        # Usu√°rio confirmou - executar limpeza
        print(f"üßπ CLEANUP: Iniciando limpeza [MISSING A.] para decks: {deck_names}")

        cleanup_missing_students_data(deck_names)

        # Log simples da limpeza conclu√≠da
        print("‚úÖ CLEANUP: Limpeza [MISSING A.] conclu√≠da")
        return {
            "missing_cleanup_count": 1,
            "missing_cleanup_message": "Dados [MISSING A.] removidos",
        }
    else:
        print("üõ°Ô∏è CLEANUP: Usu√°rio cancelou a limpeza [MISSING A.], dados preservados")
        return None


def _handle_disabled_students_cleanup(remote_decks):
    """
    Gerencia a limpeza de dados de alunos que foram desabilitados.

    Esta fun√ß√£o:
    1. Verifica se a auto-remo√ß√£o est√° ativada
    2. Identifica alunos que foram desabilitados
    3. Mostra confirma√ß√£o de seguran√ßa
    4. Remove dados se confirmado

    Args:
        remote_decks (dict): Dicion√°rio de decks remotos configurados

    Returns:
        dict: Estat√≠sticas de limpeza ou None se n√£o houve limpeza
    """
    from .config_manager import get_global_student_config
    from .config_manager import is_auto_remove_disabled_students
    from .student_manager import cleanup_disabled_students_data
    from .student_manager import get_disabled_students_for_cleanup
    from .student_manager import show_cleanup_confirmation_dialog

    # Verificar se a auto-remo√ß√£o est√° ativada
    if not is_auto_remove_disabled_students():
        return None  # Auto-remo√ß√£o desativada, nada a fazer

    print("üîç CLEANUP: Auto-remo√ß√£o est√° ATIVADA, verificando alunos desabilitados...")

    # Obter configura√ß√£o atual
    config = get_global_student_config()
    current_enabled = set(config.get("enabled_students", []))

    # L√ìGICA MELHORADA para [MISSING A.]:
    # - Se a funcionalidade de [MISSING A.] est√° ativa, incluir na lista atual
    # - Se a funcionalidade foi desativada, [MISSING A.] ser√° detectado como "removido"
    #   e suas notas ser√£o limpas
    from .config_manager import is_sync_missing_students_notes

    if is_sync_missing_students_notes():
        current_enabled.add("[MISSING A.]")
        print(
            "üîç CLEANUP: [MISSING A.] inclu√≠do na lista atual (funcionalidade ativa)"
        )
    else:
        print(
            "üîç CLEANUP: [MISSING A.] exclu√≠do da lista atual (funcionalidade desativada)"
        )
        print(
            "          Se houver notas [MISSING A.] existentes, ser√£o detectadas para remo√ß√£o"
        )

    # Para detectar alunos desabilitados, usar hist√≥rico persistente ao inv√©s de note types
    # A fun√ß√£o obsoleta foi removida - usando sistema robusto baseado em hist√≥rico
    previous_enabled = set()  # Simplificado - usar outras fontes de dados

    # Identificar alunos desabilitados
    disabled_students = get_disabled_students_for_cleanup(
        current_enabled, previous_enabled
    )

    if not disabled_students:
        print("‚úÖ CLEANUP: Nenhum aluno desabilitado detectado")
        return None

    print(
        f"‚ö†Ô∏è CLEANUP: Detectados {len(disabled_students)} alunos desabilitados: {sorted(disabled_students)}"
    )

    # Mostrar di√°logo de confirma√ß√£o
    if show_cleanup_confirmation_dialog(disabled_students):
        # Usu√°rio confirmou - executar limpeza
        deck_names = [
            deck_info.get("remote_deck_name", "") for deck_info in remote_decks.values()
        ]
        deck_names = [name for name in deck_names if name]  # Filtrar nomes vazios

        print(f"üßπ CLEANUP: Iniciando limpeza para decks: {deck_names}")

        cleanup_disabled_students_data(disabled_students, deck_names)

        # Log simples da limpeza conclu√≠da
        print(f"‚úÖ CLEANUP: Limpeza conclu√≠da para {len(disabled_students)} alunos")
        return {
            "disabled_students_count": len(disabled_students),
            "disabled_students_names": ", ".join(sorted(disabled_students)),
        }
    else:
        print("üõ°Ô∏è CLEANUP: Usu√°rio cancelou a limpeza, dados preservados")
        return None
