"""
Di√°logo para configurar sincroniza√ß√£o autom√°tica com AnkiWeb.

Este m√≥dulo permite ao usu√°rio escolher entre dois modos de sincroniza√ß√£o:
1. Desabilitado - N√£o fazer sincroniza√ß√£o autom√°tica
2. Sincroniza√ß√£o - Executar sync ap√≥s sincroniza√ß√£o de decks
"""

from .compat import AlignCenter
from .compat import DialogAccepted
from .compat import Frame_HLine
from .compat import Frame_Sunken
from .compat import QButtonGroup
from .compat import QCheckBox
from .compat import QDialog
from .compat import QFont
from .compat import QFrame
from .compat import QHBoxLayout
from .compat import QLabel
from .compat import QPushButton
from .compat import QRadioButton
from .compat import QSpinBox
from .compat import QTextEdit
from .compat import QVBoxLayout
from .compat import safe_exec_dialog
from .compat import showWarning


class AnkiWebSyncConfigDialog(QDialog):
    """
    Di√°logo para configurar sincroniza√ß√£o autom√°tica com AnkiWeb.
    """

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Configurar Sincroniza√ß√£o AnkiWeb")
        self.setFixedSize(550, 500)

        # Obter configura√ß√µes atuais
        from .config_manager import get_ankiweb_sync_mode
        from .config_manager import get_ankiweb_sync_notifications
        from .config_manager import get_ankiweb_sync_timeout

        self.current_mode = get_ankiweb_sync_mode()
        self.current_timeout = get_ankiweb_sync_timeout()
        self.current_notifications = get_ankiweb_sync_notifications()

        self._setup_ui()
        self._connect_signals()
        self._update_description()

    def _setup_ui(self):
        """Configura a interface do di√°logo."""
        layout = QVBoxLayout()
        layout.setSpacing(15)

        # T√≠tulo
        title = QLabel("Sincroniza√ß√£o Autom√°tica com AnkiWeb")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title.setFont(title_font)
        title.setAlignment(AlignCenter)
        layout.addWidget(title)

        # Descri√ß√£o geral
        desc = QLabel(
            "Configure se o Sheets2Anki deve automaticamente sincronizar com AnkiWeb ap√≥s sincronizar decks remotos."
        )
        desc.setWordWrap(True)
        layout.addWidget(desc)

        # Separator
        separator1 = QFrame()
        separator1.setFrameShape(Frame_HLine)
        separator1.setFrameShadow(Frame_Sunken)
        layout.addWidget(separator1)

        # Op√ß√µes de modo
        mode_label = QLabel("Modo de Sincroniza√ß√£o:")
        mode_font = QFont()
        mode_font.setBold(True)
        mode_label.setFont(mode_font)
        layout.addWidget(mode_label)

        # Grupo de bot√µes de r√°dio
        self.mode_group = QButtonGroup()

        # Modo desabilitado
        self.radio_none = QRadioButton("üö´ Desabilitado")
        self.radio_none.setChecked(self.current_mode == "none")
        self.mode_group.addButton(self.radio_none, 0)
        layout.addWidget(self.radio_none)

        # Modo sincroniza√ß√£o
        self.radio_sync = QRadioButton("üîÑ Sincronizar com AnkiWeb")
        self.radio_sync.setChecked(self.current_mode == "sync")
        self.mode_group.addButton(self.radio_sync, 1)
        layout.addWidget(self.radio_sync)

        # Separator
        separator2 = QFrame()
        separator2.setFrameShape(Frame_HLine)
        separator2.setFrameShadow(Frame_Sunken)
        layout.addWidget(separator2)

        # Configura√ß√µes avan√ßadas
        advanced_label = QLabel("Configura√ß√µes Avan√ßadas:")
        advanced_label.setFont(mode_font)
        layout.addWidget(advanced_label)

        # Timeout
        timeout_layout = QHBoxLayout()
        timeout_layout.addWidget(QLabel("Timeout (segundos):"))

        self.timeout_spin = QSpinBox()
        self.timeout_spin.setRange(10, 300)
        self.timeout_spin.setValue(self.current_timeout)
        self.timeout_spin.setSuffix("s")
        timeout_layout.addWidget(self.timeout_spin)

        timeout_layout.addStretch()
        layout.addLayout(timeout_layout)

        # Notifica√ß√µes
        self.notifications_check = QCheckBox("Mostrar notifica√ß√µes de sincroniza√ß√£o")
        self.notifications_check.setChecked(self.current_notifications)
        layout.addWidget(self.notifications_check)

        # Separator
        separator3 = QFrame()
        separator3.setFrameShape(Frame_HLine)
        separator3.setFrameShadow(Frame_Sunken)
        layout.addWidget(separator3)

        # √Årea de descri√ß√£o do modo selecionado
        self.description_text = QTextEdit()
        self.description_text.setReadOnly(True)
        self.description_text.setMaximumHeight(120)
        layout.addWidget(self.description_text)

        # Separator
        separator4 = QFrame()
        separator4.setFrameShape(Frame_HLine)
        separator4.setFrameShadow(Frame_Sunken)
        layout.addWidget(separator4)

        # Bot√µes
        button_layout = QHBoxLayout()

        # Bot√£o de teste
        self.test_button = QPushButton("üîç Testar Conex√£o")
        self.test_button.clicked.connect(self._test_connection)
        button_layout.addWidget(self.test_button)

        button_layout.addStretch()

        # Bot√µes padr√£o
        self.cancel_button = QPushButton("Cancelar")
        self.cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(self.cancel_button)

        self.save_button = QPushButton("Salvar")
        self.save_button.clicked.connect(self._save_settings)
        self.save_button.setDefault(True)
        button_layout.addWidget(self.save_button)

        layout.addLayout(button_layout)

        self.setLayout(layout)

    def _connect_signals(self):
        """Conecta sinais dos controles."""
        self.mode_group.buttonClicked.connect(self._update_description)

    def _update_description(self):
        """Atualiza a descri√ß√£o baseada no modo selecionado."""
        descriptions = {
            0: """üö´ <b>Modo Desabilitado</b><br><br>
Nenhuma sincroniza√ß√£o autom√°tica ser√° executada. Voc√™ precisar√° sincronizar manualmente com AnkiWeb usando Ferramentas > Sincronizar no menu do Anki.<br><br>
<b>Recomendado para:</b> Usu√°rios que preferem controle total sobre quando sincronizar.""",
            1: """üîÑ <b>Sincroniza√ß√£o AnkiWeb</b><br><br>
Ap√≥s cada sincroniza√ß√£o de decks remotos, o Sheets2Anki executar√° uma sincroniza√ß√£o com AnkiWeb. O Anki decidir√° automaticamente se deve fazer upload ou download baseado nas mudan√ßas.<br><br>
<b>Recomendado para:</b> Usu√°rios que usam Anki em m√∫ltiplos dispositivos.""",
        }

        selected_id = self.mode_group.checkedId()
        if selected_id >= 0:
            self.description_text.setHtml(descriptions.get(selected_id, ""))

    def _test_connection(self):
        """Testa a conex√£o com AnkiWeb."""
        try:
            from .ankiweb_sync import get_sync_status
            from .ankiweb_sync import test_ankiweb_connection

            self.test_button.setText("üîç Testando...")
            self.test_button.setEnabled(False)

            result = test_ankiweb_connection()

            if result["success"]:
                from .compat import showInfo

                showInfo(f"‚úÖ {result['message']}")
            else:
                # Obter informa√ß√µes de debug para diagn√≥stico
                status = get_sync_status()
                debug_info = status.get("debug_info", {})

                error_msg = f"‚ùå {result['error']}\n\n"
                error_msg += "Informa√ß√µes de diagn√≥stico:\n"
                error_msg += f"‚Ä¢ Sistema de sync dispon√≠vel: {debug_info.get('has_sync_system', 'N/A')}\n"
                error_msg += (
                    f"‚Ä¢ Sync key presente: {debug_info.get('has_sync_key', 'N/A')}\n"
                )
                error_msg += (
                    f"‚Ä¢ Profile v√°lido: {debug_info.get('has_profile', 'N/A')}\n"
                )
                error_msg += f"‚Ä¢ Profile syncKey: {debug_info.get('has_profile_synckey', 'N/A')}\n"
                error_msg += f"‚Ä¢ Profile syncUser: {debug_info.get('has_profile_syncuser', 'N/A')}\n"

                showWarning(error_msg)

        except Exception as e:
            showWarning(f"Erro ao testar conex√£o: {str(e)}")
        finally:
            self.test_button.setText("üîç Testar Conex√£o")
            self.test_button.setEnabled(True)

    def _save_settings(self):
        """Salva as configura√ß√µes e fecha o di√°logo."""
        try:
            from .config_manager import set_ankiweb_sync_mode
            from .config_manager import set_ankiweb_sync_notifications
            from .config_manager import set_ankiweb_sync_timeout

            # Determinar modo selecionado
            mode_map = {0: "none", 1: "sync"}
            selected_mode = mode_map[self.mode_group.checkedId()]

            # Salvar configura√ß√µes
            set_ankiweb_sync_mode(selected_mode)
            set_ankiweb_sync_timeout(self.timeout_spin.value())
            set_ankiweb_sync_notifications(self.notifications_check.isChecked())

            # Salvar silenciosamente e fechar
            self.accept()

        except Exception as e:
            showWarning(f"Erro ao salvar configura√ß√µes: {str(e)}")

    @staticmethod
    def show_config_dialog():
        """
        M√©todo est√°tico para mostrar o di√°logo de configura√ß√£o.

        Returns:
            bool: True se o usu√°rio salvou as configura√ß√µes, False se cancelou
        """
        dialog = AnkiWebSyncConfigDialog()
        return safe_exec_dialog(dialog) == DialogAccepted


# Fun√ß√£o de conveni√™ncia para uso externo
def show_ankiweb_sync_config():
    """Mostra o di√°logo de configura√ß√£o de sincroniza√ß√£o AnkiWeb."""
    return AnkiWebSyncConfigDialog.show_config_dialog()
