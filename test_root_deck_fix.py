"""
Teste para verificar se a aplica√ß√£o das op√ß√µes ao deck raiz est√° funcionando.
"""

import sys
import os

# Adicionar o diret√≥rio src ao path para importar os m√≥dulos
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_root_deck_options():
    """Testa se as fun√ß√µes de aplica√ß√£o de op√ß√µes ao deck raiz est√£o corretas"""
    
    print("=" * 60)
    print("TESTE: Verifica√ß√£o das Op√ß√µes do Deck Raiz")
    print("=" * 60)
    
    try:
        # Simular as constantes e fun√ß√µes necess√°rias
        from src.utils import DEFAULT_PARENT_DECK_NAME, ensure_root_deck_has_root_options, get_or_create_root_options_group
        
        print(f"‚úÖ Constante DEFAULT_PARENT_DECK_NAME: '{DEFAULT_PARENT_DECK_NAME}'")
        print("‚úÖ Fun√ß√£o ensure_root_deck_has_root_options() encontrada")
        print("‚úÖ Fun√ß√£o get_or_create_root_options_group() encontrada")
        
        # Verificar se as fun√ß√µes t√™m a l√≥gica correta
        import inspect
        
        # Examinar c√≥digo da fun√ß√£o ensure_root_deck_has_root_options
        source = inspect.getsource(ensure_root_deck_has_root_options)
        
        # Verifica√ß√µes b√°sicas
        checks = {
            "Usa DEFAULT_PARENT_DECK_NAME": "DEFAULT_PARENT_DECK_NAME" in source,
            "Cria deck se n√£o existe": "mw.col.decks.id(DEFAULT_PARENT_DECK_NAME)" in source,
            "Chama get_or_create_root_options_group": "get_or_create_root_options_group()" in source,
            "Atribui conf ao deck": "parent_deck['conf'] = root_options_group_id" in source,
            "Salva o deck": "mw.col.decks.save(parent_deck)" in source,
            "Verifica se √© None": "parent_deck_id is not None" in source,
            "Logs informativos": "print(f" in source and "[DECK_OPTIONS]" in source
        }
        
        print("\nüîç VERIFICA√á√ïES DA FUN√á√ÉO ensure_root_deck_has_root_options:")
        all_good = True
        for check, result in checks.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"  {status} {check}: {result}")
            if not result:
                all_good = False
        
        # Examinar fun√ß√£o get_or_create_root_options_group
        source2 = inspect.getsource(get_or_create_root_options_group)
        
        checks2 = {
            "Nome correto do grupo": '"Sheets2Anki - Root Options"' in source2,
            "Procura grupo existente": "all_config()" in source2,
            "Cria novo se necess√°rio": "add_config_returning_id" in source2,
            "Configura op√ß√µes": "config['new']['perDay']" in source2,
        }
        
        print("\nüîç VERIFICA√á√ïES DA FUN√á√ÉO get_or_create_root_options_group:")
        for check, result in checks2.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"  {status} {check}: {result}")
            if not result:
                all_good = False
        
        if all_good:
            print("\n‚úÖ RESULTADO: Todas as verifica√ß√µes passaram!")
            print("   A corre√ß√£o da l√≥gica do deck raiz parece estar correta.")
        else:
            print("\n‚ùå RESULTADO: Algumas verifica√ß√µes falharam!")
            
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_root_deck_options()
