#!/usr/bin/env python3
"""
Teste simples para validar limpeza de erros de f√≥rmulas.
"""

import re

def clean_formula_errors(cell_value):
    """
    Limpa valores de erro comuns de f√≥rmulas do Google Sheets.
    """
    if not cell_value or not isinstance(cell_value, str):
        return cell_value
    
    # Lista de valores de erro comuns do Google Sheets/Excel
    formula_errors = [
        '#NAME?',    # Fun√ß√£o ou nome n√£o reconhecido
        '#REF!',     # Refer√™ncia inv√°lida
        '#VALUE!',   # Tipo de valor incorreto
        '#DIV/0!',   # Divis√£o por zero
        '#N/A',      # Valor n√£o dispon√≠vel
        '#NULL!',    # Intersec√ß√£o inv√°lida
        '#NUM!',     # Erro num√©rico
        '#ERROR!',   # Erro gen√©rico
    ]
    
    cell_value_stripped = cell_value.strip()
    
    # Verificar se o valor √© um erro de f√≥rmula
    if cell_value_stripped in formula_errors:
        return ""  # Retornar string vazia para valores de erro
    
    # Verificar se come√ßa com # (poss√≠vel erro n√£o listado)
    if cell_value_stripped.startswith('#') and cell_value_stripped.endswith('!'):
        return ""  # Tratar como erro de f√≥rmula
    
    return cell_value

def test_clean_formula_errors():
    """Testa a fun√ß√£o clean_formula_errors com diversos valores."""
    
    print("üß™ Testando fun√ß√£o clean_formula_errors()...")
    
    # Casos de teste: (input, expected_output, description)
    test_cases = [
        ('#NAME?', '', 'Erro de nome de fun√ß√£o'),
        ('#REF!', '', 'Erro de refer√™ncia'),
        ('#VALUE!', '', 'Erro de valor'),
        ('#DIV/0!', '', 'Erro de divis√£o por zero'),
        ('#N/A', '', 'Valor n√£o dispon√≠vel'),
        ('  #NAME?  ', '', 'Erro com espa√ßos em branco'),
        ('Conte√∫do normal', 'Conte√∫do normal', 'Conte√∫do v√°lido'),
        ('Quest√£o v√°lida', 'Quest√£o v√°lida', 'Texto normal'),
        ('', '', 'String vazia'),
        ('123', '123', 'N√∫mero como string'),
        ('#CUSTOM!', '', 'Erro customizado (padr√£o #...!)'),
        ('texto#normal', 'texto#normal', 'Texto com # no meio'),
        ('#', '#', 'Apenas # (n√£o √© erro)'),
        ('#texto', '#texto', 'Texto iniciando com # (n√£o √© erro)'),
    ]
    
    print(f"\nüìã Executando {len(test_cases)} casos de teste:\n")
    
    passed = 0
    failed = 0
    
    for i, (input_val, expected, description) in enumerate(test_cases, 1):
        try:
            result = clean_formula_errors(input_val)
            if result == expected:
                print(f"‚úÖ Teste {i:2d}: {description}")
                print(f"    Input: {repr(input_val)} ‚Üí Output: {repr(result)}")
                passed += 1
            else:
                print(f"‚ùå Teste {i:2d}: {description}")
                print(f"    Input: {repr(input_val)}")
                print(f"    Esperado: {repr(expected)}")
                print(f"    Obtido: {repr(result)}")
                failed += 1
        except Exception as e:
            print(f"üí• Teste {i:2d}: {description} - ERRO: {e}")
            failed += 1
        
        print()
    
    print(f"üìä Resultados: {passed} passou(ram), {failed} falhou(ram)")
    
    if failed == 0:
        print("üéâ Todos os testes passaram!")
        return True
    else:
        print(f"‚ö†Ô∏è  {failed} teste(s) falharam")
        return False

def test_integration_example():
    """Testa um exemplo de integra√ß√£o completa."""
    
    print("üîÑ Testando integra√ß√£o com dados de exemplo...")
    
    # Simular dados TSV com erros de f√≥rmula
    sample_row = [
        '1',                    # ID
        'Qual √© a resposta?',   # PERGUNTA
        '#NAME?',               # LEVAR PARA PROVA (erro de f√≥rmula)
        'true',                 # SYNC?
        'Informa√ß√£o v√°lida',    # INFO COMPLEMENTAR
        '#REF!',                # INFO DETALHADA (erro de f√≥rmula)
        'Exemplo 1',            # EXEMPLO 1
        '#VALUE!',              # EXEMPLO 2 (erro de f√≥rmula)
    ]
    
    headers = ['ID', 'PERGUNTA', 'LEVAR PARA PROVA', 'SYNC?', 
               'INFO COMPLEMENTAR', 'INFO DETALHADA', 'EXEMPLO 1', 'EXEMPLO 2']
    
    # Simular cria√ß√£o de fields dict
    fields = {}
    for i, header in enumerate(headers):
        if i < len(sample_row):
            raw_value = sample_row[i].strip()
            cleaned_value = clean_formula_errors(raw_value)
            fields[header] = cleaned_value
        else:
            fields[header] = ""
    
    print("\nüìã Dados originais:")
    for i, (header, raw_val) in enumerate(zip(headers, sample_row)):
        print(f"  {header}: {repr(raw_val)}")
    
    print("\n‚ú® Dados ap√≥s limpeza:")
    for header in headers:
        print(f"  {header}: {repr(fields[header])}")
    
    # Verificar se os erros foram limpos
    expected_clean = {
        'ID': '1',
        'PERGUNTA': 'Qual √© a resposta?',
        'LEVAR PARA PROVA': '',  # Limpo de #NAME?
        'SYNC?': 'true',
        'INFO COMPLEMENTAR': 'Informa√ß√£o v√°lida',
        'INFO DETALHADA': '',    # Limpo de #REF!
        'EXEMPLO 1': 'Exemplo 1',
        'EXEMPLO 2': '',         # Limpo de #VALUE!
    }
    
    success = True
    for header, expected_val in expected_clean.items():
        if fields[header] != expected_val:
            print(f"‚ùå Erro no campo {header}: esperado {repr(expected_val)}, obtido {repr(fields[header])}")
            success = False
    
    if success:
        print("\nüéâ Integra√ß√£o funcionando corretamente!")
        return True
    else:
        print("\n‚ö†Ô∏è  Problemas na integra√ß√£o detectados")
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("üß™ TESTES DE LIMPEZA DE ERROS DE F√ìRMULAS")
    print("=" * 60)
    
    test1_result = test_clean_formula_errors()
    print("\n" + "=" * 60)
    test2_result = test_integration_example()
    
    print("\n" + "=" * 60)
    if test1_result and test2_result:
        print("üéâ TODOS OS TESTES PASSARAM!")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")
