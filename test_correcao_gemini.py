#!/usr/bin/env python3
"""
Teste para validar a corre√ß√£o do problema com f√≥rmulas Gemini.
"""
import sys
import os

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Importar as fun√ß√µes diretamente do c√≥digo para evitar problemas de imports relativos
import re

def detect_formula_content(cell_value):
    """
    Detecta se o conte√∫do da c√©lula ainda cont√©m uma f√≥rmula n√£o calculada.
    VERS√ÉO CORRIGIDA para funcionar com f√≥rmulas Gemini.
    """
    if not cell_value or not isinstance(cell_value, str):
        return False
    
    cell_value = cell_value.strip()
    
    # Verificar se √© apenas o sinal de igual
    if cell_value == '=':
        return False
    
    # Verificar se come√ßa com = mas n√£o √© uma f√≥rmula v√°lida
    if cell_value.startswith('='):
        # Deve ter pelo menos um caractere ap√≥s o =
        if len(cell_value) <= 1:
            return False
        
        # Verificar padr√µes de f√≥rmulas Gemini PRIMEIRO (prioridade m√°xima)
        # F√≥rmulas Gemini s√£o sempre consideradas v√°lidas, independente do conte√∫do
        gemini_patterns = [
            r'^=GEMINI_\w+\(',  # =GEMINI_QUALQUER_COISA(
            r'^=AI_\w+\(',      # =AI_QUALQUER_COISA(
        ]
        
        for pattern in gemini_patterns:
            if re.search(pattern, cell_value):
                return True
        
        # Verificar padr√µes de f√≥rmulas v√°lidas PRIMEIRO (antes dos indicadores)
        # Isso permite que f√≥rmulas leg√≠timas sejam detectadas mesmo com palavras comuns
        valid_formula_patterns = [
            r'^=\w+\(',  # =FUNCAO(
            r'^=\w+_\w+\(',  # =FUNCAO_COMPOSTA( (ex: GEMINI_2_5_FLASH)
            r'^=\w+_\w+_\w+\(',  # =FUNCAO_COMPOSTA_LONGA( (ex: GEMINI_2_5_FLASH)
            r'^=\d+[\+\-\*\/]',  # =5+, =10*, etc.
            r'^=[A-Z]+\d+',  # =A1, =B2, etc.
            r'^=.*\([^\)]*\).*$',  # Qualquer fun√ß√£o com par√™nteses
            r'^=\d+(\.\d+)?([\+\-\*\/]\d+(\.\d+)?)+$',  # Opera√ß√µes matem√°ticas: =5+3, =10*2.5
        ]
        
        # Verificar padr√µes v√°lidos primeiro
        for pattern in valid_formula_patterns:
            if re.search(pattern, cell_value):
                # Se coincide com um padr√£o v√°lido, verificar se n√£o √© falso positivo
                # Para f√≥rmulas com par√™nteses, assumir que s√£o v√°lidas
                if '(' in cell_value and ')' in cell_value:
                    return True
                # Para outros padr√µes, continuar com verifica√ß√£o de indicadores
                break
        else:
            # Se n√£o coincide com nenhum padr√£o v√°lido, n√£o √© f√≥rmula
            return False
        
        # Verificar padr√µes de f√≥rmulas v√°lidas
        formula_content = cell_value[1:]  # Remove o =
        
        # Se cont√©m apenas espa√ßos ap√≥s =, n√£o √© f√≥rmula
        if not formula_content.strip():
            return False
        
        # Para f√≥rmulas com par√™nteses, ser menos restritivo com indicadores
        # Verificar se √© uma fun√ß√£o v√°lida (tem par√™nteses balanceados)
        if '(' in cell_value and ')' in cell_value:
            # Contar par√™nteses para verificar se est√£o balanceados
            open_count = cell_value.count('(')
            close_count = cell_value.count(')')
            if open_count == close_count and open_count > 0:
                # √â prov√°vel que seja uma fun√ß√£o v√°lida, aplicar filtros mais relaxados
                restrictive_indicators = [
                    ' n√£o √© ', ' nao √© ', ' n√£o deve ', ' nao deve ',
                    ' n√£o pode ', ' nao pode ', ' n√£o tem ', ' nao tem ',
                ]
                
                for indicator in restrictive_indicators:
                    if indicator in cell_value.lower():
                        return False
                
                # Se passou nos filtros restritivos, √© uma f√≥rmula
                return True
        
        # Para outros casos, aplicar filtros mais rigorosos
        non_formula_indicators = [
            ' n√£o ', ' nao ', ' is ', ' are ', ' was ', ' were ',
            ' the ', ' and ', ' or ', ' but ', ' if ', ' when ',
            ' para ', ' com ', ' sem ', ' por ', ' em ',
            # Removido ' de ' - muito comum em f√≥rmulas leg√≠timas (ex: Gemini)
        ]
        
        for indicator in non_formula_indicators:
            if indicator in cell_value.lower():
                return False
        
        # Se passou em todos os testes, verificar novamente os padr√µes
        for pattern in valid_formula_patterns:
            if re.search(pattern, cell_value):
                return True
        
        return False
    
    return False

def clean_formula_errors(cell_value):
    """
    Limpa valores de erro comuns de f√≥rmulas do Google Sheets e f√≥rmulas n√£o calculadas.
    """
    if not cell_value or not isinstance(cell_value, str):
        return cell_value
    
    # Lista de valores de erro comuns do Google Sheets/Excel
    formula_errors = [
        '#NAME?',    # Fun√ß√£o ou nome n√£o reconhecido
        '#REF!',     # Refer√™ncia inv√°lida
        '#VALUE!',   # Tipo de valor incorreto
        '#DIV/0!',   # Divis√£o por zero
        '#N/A',      # Valor n√£o dispon√≠vel
        '#NULL!',    # Intersec√ß√£o inv√°lida
        '#NUM!',     # Erro num√©rico
        '#ERROR!',   # Erro gen√©rico
    ]
    
    cell_value_stripped = cell_value.strip()
    
    # Verificar se o valor √© um erro de f√≥rmula
    if cell_value_stripped in formula_errors:
        return ""  # Retornar string vazia para valores de erro
    
    # Verificar se come√ßa com # (poss√≠vel erro n√£o listado)
    if cell_value_stripped.startswith('#') and cell_value_stripped.endswith('!'):
        return ""  # Tratar como erro de f√≥rmula
    
    # Verificar se √© uma f√≥rmula n√£o calculada (novo)
    if detect_formula_content(cell_value_stripped):
        return ""  # Tratar f√≥rmula n√£o calculada como vazio
    
    return cell_value

def test_gemini_formula_detection():
    """Testa se f√≥rmulas Gemini s√£o detectadas corretamente ap√≥s a corre√ß√£o."""
    
    print("üß™ TESTE: Detec√ß√£o de F√≥rmulas Gemini")
    print("=" * 60)
    
    # Casos de teste com f√≥rmulas Gemini
    gemini_test_cases = [
        '=GEMINI_2_5_FLASH("me de um caso de uso que explica o conceito \'" & F2 & "\' de forma did√°tica, considerando o contexto \'" & D2 & "\'")',
        '=GEMINI_AI("explique de forma did√°tica")',
        '=GEMINI_PRO("me de um exemplo de uso")',
        '=AI_FUNCTION("prompt de teste")',
        '=GEMINI_1_5_FLASH("teste de integra√ß√£o")',
    ]
    
    # Casos de teste com texto normal (n√£o deve ser detectado como f√≥rmula)
    text_test_cases = [
        'Este √© um texto normal de exemplo',
        'Uma resposta que cont√©m a palavra de no meio',
        'Explica√ß√£o did√°tica sobre o conceito',
        '= n√£o √© uma f√≥rmula v√°lida',
        '=',
        '',
    ]
    
    # Casos de teste com outras f√≥rmulas v√°lidas
    other_formula_cases = [
        '=SUM(A1:A10)',
        '=VLOOKUP(B2,D:E,2,FALSE)',
        '=IF(A1>10,"Grande","Pequeno")',
        '=CONCATENATE("Ol√° ", B2)',
        '=5+3*2',
    ]
    
    print("üéØ TESTANDO F√ìRMULAS GEMINI:")
    print("-" * 40)
    
    gemini_success = True
    for formula in gemini_test_cases:
        is_detected = detect_formula_content(formula)
        cleaned = clean_formula_errors(formula)
        
        print(f"F√≥rmula: {formula[:50]}...")
        print(f"  Detectada como f√≥rmula: {is_detected}")
        print(f"  Resultado da limpeza: '{cleaned[:50]}...' (vazio={cleaned == ''})")
        
        if not is_detected:
            print("  ‚ùå ERRO: F√≥rmula Gemini n√£o foi detectada!")
            gemini_success = False
        else:
            print("  ‚úÖ OK: F√≥rmula Gemini detectada corretamente")
        
        print()
    
    print("üî§ TESTANDO TEXTO NORMAL:")
    print("-" * 40)
    
    text_success = True
    for text in text_test_cases:
        is_detected = detect_formula_content(text)
        cleaned = clean_formula_errors(text)
        
        print(f"Texto: {text[:50]}...")
        print(f"  Detectado como f√≥rmula: {is_detected}")
        print(f"  Resultado da limpeza: '{cleaned[:50]}...'")
        
        if is_detected:
            print("  ‚ùå ERRO: Texto normal foi detectado como f√≥rmula!")
            text_success = False
        else:
            print("  ‚úÖ OK: Texto normal n√£o foi detectado como f√≥rmula")
        
        print()
    
    print("üîß TESTANDO OUTRAS F√ìRMULAS:")
    print("-" * 40)
    
    other_success = True
    for formula in other_formula_cases:
        is_detected = detect_formula_content(formula)
        cleaned = clean_formula_errors(formula)
        
        print(f"F√≥rmula: {formula}")
        print(f"  Detectada como f√≥rmula: {is_detected}")
        print(f"  Resultado da limpeza: '{cleaned}' (vazio={cleaned == ''})")
        
        if not is_detected:
            print("  ‚ùå ERRO: F√≥rmula v√°lida n√£o foi detectada!")
            other_success = False
        else:
            print("  ‚úÖ OK: F√≥rmula detectada corretamente")
        
        print()
    
    # Resultado final
    print("üìä RESULTADO FINAL:")
    print("=" * 60)
    
    if gemini_success and text_success and other_success:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("üéâ A corre√ß√£o do problema com f√≥rmulas Gemini foi bem-sucedida!")
        return True
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        print("‚ùå F√≥rmulas Gemini:", "‚úÖ OK" if gemini_success else "‚ùå FALHA")
        print("‚ùå Texto normal:", "‚úÖ OK" if text_success else "‚ùå FALHA") 
        print("‚ùå Outras f√≥rmulas:", "‚úÖ OK" if other_success else "‚ùå FALHA")
        return False

def test_specific_gemini_issue():
    """Testa o caso espec√≠fico mencionado pelo usu√°rio."""
    
    print("\n" + "="*60)
    print("üéØ TESTE ESPEC√çFICO: Problema Reportado pelo Usu√°rio")
    print("="*60)
    
    # F√≥rmula espec√≠fica que estava causando problema
    problematic_formula = '=GEMINI_2_5_FLASH("me de um caso de uso que explica o conceito \'" & F2 & "\' de forma did√°tica, considerando o contexto \'" & D2 & "\'")'
    
    print(f"F√≥rmula problem√°tica:")
    print(f"  {problematic_formula}")
    print()
    
    # Testar detec√ß√£o
    is_detected = detect_formula_content(problematic_formula)
    cleaned = clean_formula_errors(problematic_formula)
    
    print("Resultados:")
    print(f"  Detectada como f√≥rmula: {is_detected}")
    print(f"  Resultado da limpeza: '{cleaned}' (vazio={cleaned == ''})")
    print()
    
    # Explicar o que deveria acontecer
    print("Comportamento esperado:")
    print("  ‚úÖ Deve ser detectada como f√≥rmula (True)")
    print("  ‚úÖ Deve ser limpa (retornar string vazia) se for f√≥rmula n√£o calculada")
    print("  ‚úÖ Deve preservar o resultado se for valor calculado")
    print()
    
    if is_detected:
        print("‚úÖ SUCESSO: F√≥rmula Gemini agora √© detectada corretamente!")
        print("üéâ O problema do comportamento inconsistente foi resolvido!")
        return True
    else:
        print("‚ùå FALHA: F√≥rmula Gemini ainda n√£o √© detectada!")
        print("‚ùå O problema persiste...")
        return False

if __name__ == "__main__":
    print("üîç TESTE DE CORRE√á√ÉO DO PROBLEMA COM F√ìRMULAS GEMINI")
    print("=" * 70)
    
    # Executar testes
    general_success = test_gemini_formula_detection()
    specific_success = test_specific_gemini_issue()
    
    print("\n" + "="*70)
    print("üèÅ RESULTADO GERAL:")
    print("="*70)
    
    if general_success and specific_success:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("üéâ A corre√ß√£o foi implementada com sucesso!")
        print("üîß As f√≥rmulas Gemini agora devem ter comportamento consistente!")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        print("üîß Pode ser necess√°rio ajustar a implementa√ß√£o...")
    
    print("\nüí° PR√ìXIMOS PASSOS:")
    print("1. Testar com planilhas reais contendo f√≥rmulas Gemini")
    print("2. Verificar se o comportamento √© consistente na sincroniza√ß√£o")
    print("3. Monitorar se outras f√≥rmulas continuam funcionando")
    print("4. Documentar o comportamento esperado")
